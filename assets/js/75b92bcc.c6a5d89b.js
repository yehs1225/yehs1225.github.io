"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,k=u["".concat(r,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const l={},o="GetStarted-documents",s={unversionedId:"Django/[DJ]GetStarted-documents",id:"Django/[DJ]GetStarted-documents",title:"GetStarted-documents",description:"Know Django",source:"@site/docs/Django/[DJ]GetStarted-documents.md",sourceDirName:"Django",slug:"/Django/[DJ]GetStarted-documents",permalink:"/docs/Django/[DJ]GetStarted-documents",draft:!1,editUrl:"https://github.com/yehs1225/yehs1225.github.io/docs/Django/[DJ]GetStarted-documents.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deploy",permalink:"/docs/Django/[DJ]Deploy"},next:{title:"GetStarted - build CRM [1]",permalink:"/docs/Django/[DJ]GetStartedBuildCRM[1]"}},r={},p=[{value:"Know Django",id:"know-django",level:2},{value:"What is Django",id:"what-is-django",level:5},{value:"Why",id:"why",level:5},{value:"Django Project and Apps",id:"django-project-and-apps",level:4},{value:"Project",id:"project",level:5},{value:"Apps",id:"apps",level:5},{value:"Set up miniconda",id:"set-up-miniconda",level:2},{value:"Start using django",id:"start-using-django",level:2},{value:"Build an polls app",id:"build-an-polls-app",level:2},{value:"Set up a database",id:"set-up-a-database",level:3},{value:"In settings.py",id:"in-settingspy",level:5},{value:"Creating models",id:"creating-models",level:5},{value:"Activate models",id:"activate-models",level:5},{value:"Playing with the API",id:"playing-with-the-api",level:5},{value:"Introducing the Django Admin",id:"introducing-the-django-admin",level:2},{value:"Write more views",id:"write-more-views",level:2},{value:"Let views actually do something",id:"let-views-actually-do-something",level:3},{value:"(1) returning HttpResponse",id:"1-returning-httpresponse",level:5},{value:"(2) rasing exception",id:"2-rasing-exception",level:5},{value:"Use the template system",id:"use-the-template-system",level:5},{value:"Removing hardcoded URLs in templates",id:"removing-hardcoded-urls-in-templates",level:3},{value:"Namespacing URL names",id:"namespacing-url-names",level:5},{value:"Write a minimal form",id:"write-a-minimal-form",level:2},{value:"Generic view",id:"generic-view",level:3},{value:"Amend URLconf",id:"amend-urlconf",level:5},{value:"Amend views",id:"amend-views",level:5},{value:"Testing",id:"testing",level:2},{value:"Create a test to expose the bug",id:"create-a-test-to-expose-the-bug",level:4},{value:"Fix the bug",id:"fix-the-bug",level:4},{value:"More comprehensive tests",id:"more-comprehensive-tests",level:4},{value:"Test a view",id:"test-a-view",level:3},{value:"Django test Client",id:"django-test-client",level:4},{value:"Customize App&#39;s look and feel",id:"customize-apps-look-and-feel",level:2},{value:"Add images",id:"add-images",level:5},{value:"Customize the admin form",id:"customize-the-admin-form",level:2},{value:"Admin form",id:"admin-form",level:3},{value:"Adding related objects",id:"adding-related-objects",level:3},{value:"Change <code>StackedInline</code> to <code>TabularInline</code>",id:"change-stackedinline-to-tabularinline",level:5},{value:"Admin change list",id:"admin-change-list",level:3}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getstarted-documents"},"GetStarted-documents"),(0,i.kt)("h2",{id:"know-django"},"Know Django"),(0,i.kt)("h5",{id:"what-is-django"},"What is Django"),(0,i.kt)("p",null,"Django is a Python based web framework for building dynamic web applications."),(0,i.kt)("h5",{id:"why"},"Why"),(0,i.kt)("p",null,"Make it easier to build better Web apps more quickly and less code."),(0,i.kt)("h4",{id:"django-project-and-apps"},"Django Project and Apps"),(0,i.kt)("h5",{id:"project"},"Project"),(0,i.kt)("p",null,"It is the overall web application setup and all parts and settings."),(0,i.kt)("h5",{id:"apps"},"Apps"),(0,i.kt)("p",null,"It is a subcomponent or submodule of the Project and it is independent of other Apps even though they all function in the same Project."),(0,i.kt)("h2",{id:"set-up-miniconda"},"Set up miniconda"),(0,i.kt)("p",null,"common conda command:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"build env : ",(0,i.kt)("inlineCode",{parentName:"li"},"conda create --name <'env_name'> python=3.9"),"(the version u want.)"),(0,i.kt)("li",{parentName:"ul"},"enter env  : ",(0,i.kt)("inlineCode",{parentName:"li"},"conda activate <'env_name'>")),(0,i.kt)("li",{parentName:"ul"},"leave env : ",(0,i.kt)("inlineCode",{parentName:"li"},"conda deactivate"))),(0,i.kt)("p",null,"if you are using VSCode, Ctrl + Shift + P -> Type and select 'Python: Select Interpreter' to change to the current environment. "),(0,i.kt)("h2",{id:"start-using-django"},"Start using django"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"build-a-project-django-admin-startproject-mysite"},"Build a project :",(0,i.kt)("inlineCode",{parentName:"h4"},"django-admin startproject mysite")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"structure")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mysite/   => ",(0,i.kt)("em",{parentName:"li"},"container of project (can rename)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"manage.py"),(0,i.kt)("li",{parentName:"ul"},"mysite/ => ",(0,i.kt)("em",{parentName:"li"},"python packeage for Ur project"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"}," init"),".py => ",(0,i.kt)("em",{parentName:"li"},"Tell python that this directory should be considered a Python package")),(0,i.kt)("li",{parentName:"ul"},"settings.py => ",(0,i.kt)("em",{parentName:"li"},"Tell U")," all about how settings work"),(0,i.kt)("li",{parentName:"ul"},"urls.py => ",(0,i.kt)("em",{parentName:"li"},"The URL declarations for this Django project; a \u201ctable of contents\u201d of your Django-powered site. (Django lets you design URLs however you want, with no framework limitations.)")),(0,i.kt)("li",{parentName:"ul"},"asgi.py => ",(0,i.kt)("em",{parentName:"li"},"An entry-point for ASGI-compatible web servers to serve your project.")," "),(0,i.kt)("li",{parentName:"ul"},"wsgi.py =>  ",(0,i.kt)("em",{parentName:"li"},"An entry-point for WSGI-compatible web servers to serve your project.")))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"verify-project-work"},"Verify project work?"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type",(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py runserver")," "),(0,i.kt)("p",{parentName:"li"},"Ignore warning, we'll set databases migrations later.U can check if it success at http://localhost:8000/ "),(0,i.kt)("p",{parentName:"li"},"U can change port (to 8080)",(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py runserver 8080")))))),(0,i.kt)("h2",{id:"build-an-polls-app"},"Build an polls app"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py startapp polls"),' create a directory called "polls", directory structure looks like'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"mysite/   \n    mysite/\n    db.sqlite3/\n    manage.py\n    polls/\n        __init__.py\n        admin.py\n        apps.py\n        migrations/\uff1f\n            __init__.py\n        models.py\n        tests.py\n        views.py\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"write code in polls/views.py")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"add and write in new file < urls.py >  To call the view, we need to map it to a URL"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Be care of 2 different urls.py ! Or U'll got 404 page not error :(")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"#mysite/polls/urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='index')\n]\n")),(0,i.kt)("p",{parentName:"li"},"And in ",(0,i.kt)("strong",{parentName:"p"},"another urls.py")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"#mysite/mtysite/urls.py\nfrom django.contrib import admin\nfrom django.urls import include, path\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n#You should always use `include()` when you include other URL patterns. `admin.site.urls` is the only exception to this.\n")))),(0,i.kt)("h3",{id:"set-up-a-database"},"Set up a database"),(0,i.kt)("h5",{id:"in-settingspy"},"In settings.py"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"U'll need to set in settings.py if U want to use databases other than SQLite(default choice)"),(0,i.kt)("li",{parentName:"ul"},"INSTALLED_APPS = ","[...]"," can be revise if U don't need."),(0,i.kt)("li",{parentName:"ul"},"set TIME_ZONE :'Asia/Taipei' ( ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"},"List of tz database time zones - Wikipedia"),")")),(0,i.kt)("h5",{id:"creating-models"},"Creating models"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Concept of models in django [",(0,i.kt)("a",{parentName:"p",href:"https://www.learncodewithmike.com/2020/03/django-model-migration.html"},"Django\u6559\u5b783","]","Django Migration(\u8cc7\u6599\u9077\u79fb)\u7684\u91cd\u8981\u89c0\u5ff5 (learncodewithmike.com)"),"\t")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Concept of ORM( Object Relational Mapping) [",(0,i.kt)("a",{parentName:"p",href:"https://ithelp.ithome.com.tw/articles/10207752"},"Day20","]"," \u8cc7\u6599\u5eab\u8a2d\u8a08\u6982\u5ff5 - ORM - iT \u90a6\u5e6b\u5fd9::\u4e00\u8d77\u5e6b\u5fd9\u89e3\u6c7a\u96e3\u984c\uff0c\u62ef\u6551 IT \u4eba\u7684\u4e00\u5929 (ithome.com.tw)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Edit in polls/models.py"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"It's vital to add ",(0,i.kt)("inlineCode",{parentName:"strong"},"__str__()")," method.")),(0,i.kt)("p",{parentName:"li"},"U can also add custom method. (e.g. was_published_recently)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"from django.db import models\n# Create 2 tables.\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n    #neccessary\n    def __str__(self):\n        return self.question_text\n    #custom method\n    def was_published_recently(self):\n        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)\n    \nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n    def __str__(self):\n        return self.question_text\n")))),(0,i.kt)("h5",{id:"activate-models"},"Activate models"),(0,i.kt)("p",null,'The above "model code" gives Django ',(0,i.kt)("strong",{parentName:"p"},"(1)")," CREATE TABLE(schema) ",(0,i.kt)("strong",{parentName:"p"},"(2)")," Create a Python database-access API for accessing those objects(Question & Choice)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tell our project that the ",(0,i.kt)("strong",{parentName:"p"},"polls")," app is installed. (Django app is pluggable)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"#mysite/settings.py\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    ....,\n    'django.contrib.staticfiles',\n]\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py makemigrations polls")," ",(0,i.kt)("em",{parentName:"p"},"Create migrations for those changes")),(0,i.kt)("p",{parentName:"li"},"U'll see migrations for 'polls' , < storing position >, Create model Question , Create model Choice"),(0,i.kt)("p",{parentName:"li"},"Use  ",(0,i.kt)("inlineCode",{parentName:"p"},"makemigrations")," when U make changes in Model(table) and then Django stores the changes. All migration are stored in polls/migrations/XXX.py"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py sqlmigrate polls 0001"),"\t"),(0,i.kt)("p",{parentName:"li"},"See more readable TABLE.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py migrate"),"\t",(0,i.kt)("em",{parentName:"p"},"apply those changes")))),(0,i.kt)("h5",{id:"playing-with-the-api"},"Playing with the API"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py shell")),(0,i.kt)("p",{parentName:"li"},"By this command, we can use our Models."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# First Import the model classes we just wrote.\nfrom polls.models import Choice, Question \n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"References of Playing APIs : ",(0,i.kt)("a",{parentName:"li",href:"https://docs.djangoproject.com/en/4.0/topics/db/queries/"},"Making queries | Django documentation | Django (djangoproject.com)")),(0,i.kt)("li",{parentName:"ul"},"Related objects : ",(0,i.kt)("a",{parentName:"li",href:"https://docs.djangoproject.com/en/4.0/ref/models/relations/"},"https://docs.djangoproject.com/en/4.0/ref/models/relations/")),(0,i.kt)("li",{parentName:"ul"},"Field lookups : ",(0,i.kt)("a",{parentName:"li",href:"https://docs.djangoproject.com/en/4.0/topics/db/queries/#field-lookups-intro"},"Making queries | Django documentation | Django (djangoproject.com)"))))),(0,i.kt)("h2",{id:"introducing-the-django-admin"},"Introducing the Django Admin"),(0,i.kt)("p",null,"Django build a Admin page automatically. Thus, we can make revise our data conveniently."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py createsuperuser"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py runserver"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"make the ",(0,i.kt)("strong",{parentName:"p"},"poll app")," modifiable in the admin"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"#polls/admin.py\nfrom .models import Question\nadmin.site.register(Question)\n")))),(0,i.kt)("h2",{id:"write-more-views"},"Write more views"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"edit in polls/views.py , add new lines besides ",(0,i.kt)("inlineCode",{parentName:"p"},"def index(){...}")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'def detail(request, question_id):\n    return HttpResponse("You\'re looking at question %s." % question_id)\n\ndef results(request, question_id):\n    response = "You\'re looking at the results of question %s."\n    return HttpResponse(response % question_id)\n\ndef vote(request, question_id):\n    return HttpResponse("You\'re voting on question %s." % question_id)\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"edit in polls/urls.py , when we have new views , do not forget add ",(0,i.kt)("inlineCode",{parentName:"p"},"path()")," call in urls.py"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"< int:question_id>")," "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u300c < > \u300dcaptures part of the URL and send it as keyword argument to the view function"),(0,i.kt)("li",{parentName:"ul"},"\u300cint\u300dis convertor , \u300cquestion_id\u300d will be used to identify the matched pattern , seperated by \u300c:\u300d")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"urlpatterns = [\n    # ex: /polls/\n    path('', views.index, name='index'),\n    #-----------new----------------------------------------------\n    # ex: /polls/5/\n    path('<int:question_id>/', views.detail, name='detail'),\n    # ex: /polls/5/results/\n    path('<int:question_id>/results/', views.results, name='results'),\n    # ex: /polls/5/vote/\n    path('<int:question_id>/vote/', views.vote, name='vote'),\n]\n")))),(0,i.kt)("h3",{id:"let-views-actually-do-something"},"Let views actually do something"),(0,i.kt)("p",null,"2 things views should do : (1) returning HttpResponse (2) rasing exception (e.g.Http404)"),(0,i.kt)("h5",{id:"1-returning-httpresponse"},"(1) returning HttpResponse"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"show latest 5 dataset in system"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"def index(request):\n    latest_question_list = Question.objects.order_by('-pub_date')[:5]\n    output = ', '.join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)\n\n# Leave the rest of the views (detail, results, vote) unchanged\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"change template "),(0,i.kt)("p",{parentName:"li"},"create new directory in ",(0,i.kt)("em",{parentName:"p"},"/polls")," named ",(0,i.kt)("em",{parentName:"p"},"templates")," , then in ",(0,i.kt)("em",{parentName:"p"},"/polls/template")," create new directory named ",(0,i.kt)("em",{parentName:"p"},"polls")," , finally create ",(0,i.kt)("em",{parentName:"p"},"index.html"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"We should not avoid create subdirectory ","*","polls","*"," in templates , otherwise if we have same template name in different apps , Django may got the wrong one.")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"\x3c!-- polls/templates/polls/index.html --\x3e\n<html>\n    <head></head>\n    <body>\n        <h1>{{ question.question_text }}</h1>\n        <ul>\n        {% for choice in question.choice_set.all %}\n            <li>{{ choice.choice_text }}</li>\n        {% endfor %}\n        </ul>\n    </body>\n</html>\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"use template in views.py"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"from django.template import loader")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"template = loader.get_template(<'app_name/index.html'>)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"return HttpResponse(template.render(context, request))"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"#polls/views\nfrom django.template import loader\n\ndef index(request):\n    latest_question_list = Question.objects.order_by('-pub_date')[:5]\n    template = loader.get_template('polls/index.html')\n    context = {\n        'latest_question_list': latest_question_list,\n    }\n    return HttpResponse(template.render(context, request))\n")))),(0,i.kt)("h5",{parentName:"li",id:"shortcut--render"},"Shortcut : ",(0,i.kt)("inlineCode",{parentName:"h5"},"render()")),(0,i.kt)("p",{parentName:"li"},"It is idiom to load a template , ",(0,i.kt)("strong",{parentName:"p"},"fiil context and return Httpresponse"),". Therefore use ",(0,i.kt)("inlineCode",{parentName:"p"},"render()"),"."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"from django.shortcuts import render")),(0,i.kt)("p",{parentName:"li"},"No longer need to import ",(0,i.kt)("inlineCode",{parentName:"p"},"loader")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpResponse"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"modify return()"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"from django.shortcuts import render\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by('-pub_date')[:5]\n    context = {'latest_question_list': latest_question_list}\n    return render(request, 'polls/index.html', context)\n")))))),(0,i.kt)("h5",{id:"2-rasing-exception"},"(2) rasing exception"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h5",{parentName:"li",id:"rasing-a-404-error"},"Rasing a 404 error"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"from django.http import Http404"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"add ",(0,i.kt)("inlineCode",{parentName:"p"},"def detail():{...}")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"from django.http import Http404\nfrom django.shortcuts import render\n\nfrom .models import Question\n# ...\ndef detail(request, question_id):\n    try:\n        question = Question.objects.get(pk=question_id)\n    except Question.DoesNotExist:\n        raise Http404(\"Question does not exist\")\n    return render(request, 'polls/detail.html', {'question': question})\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"add new file ",(0,i.kt)("em",{parentName:"p"},"detail.html")," in ",(0,i.kt)("em",{parentName:"p"},"polls/templates/polls/detail.html")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"\x3c!-- polls/templates/polls/detail.html --\x3e\n<html>\n    <head></head>\n    <body>\n        {{ question }}\n    </body>\n</html>\n")))),(0,i.kt)("h5",{parentName:"li",id:"shortcut--get_object_or_404modelkeyword-arguments"},"Shortcut : ",(0,i.kt)("inlineCode",{parentName:"h5"},"get_object_or_404(<'model'>,<keyword arguments>)")),(0,i.kt)("p",{parentName:"li"},"  Pass ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"get()"))," function of model's manager, rasing Http404 if the object not exist. The main reasion to use this is to maintain \t",(0,i.kt)("strong",{parentName:"p"},"loos coupling")," , which is foremast design goals of Django. Also there are ",(0,i.kt)("inlineCode",{parentName:"p"},"get_list_or_404()"),", which works just like this , but \tusing ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"get()"),"."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"from django.shortcuts import get_object_or_404")),(0,i.kt)("li",{parentName:"ol"},"no longer need ",(0,i.kt)("inlineCode",{parentName:"li"},"try:...except"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  from django.shortcuts import get_object_or_404, render\n\n  from .models import Question\n  # ...\n  def detail(request, question_id):\n      question = get_object_or_404(Question, pk=question_id)\n      return render(request, 'polls/detail.html', {'question': question})\n")))),(0,i.kt)("h5",{id:"use-the-template-system"},"Use the template system"),(0,i.kt)("p",null,"More : ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/topics/templates/"},"Templates | Django documentation | Django (djangoproject.com)")),(0,i.kt)("p",null,"It generate HTML dynamically in a convenient way. The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/ref/templates/language/"},"Django template language")," is Django\u2019s own template system. If you don\u2019t have a pressing reason to choose another backend, you should use the DTL, especially if you\u2019re writing a pluggable application and you intend to distribute templates."),(0,i.kt)("h3",{id:"removing-hardcoded-urls-in-templates"},"Removing hardcoded URLs in templates"),(0,i.kt)("p",null,"In ",(0,i.kt)("em",{parentName:"p"},"polls/index.html"),", the below code is hardcoded, tightly-coupled approach."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\x3c!--polls/index.html--\x3e\n<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>\n')),(0,i.kt)("p",null,"Change to "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\x3c!--polls/index.html--\x3e\n<li><a href=\"{% url 'detail' question.id %}\">{{ question.question_text }}</a></li\n")),(0,i.kt)("p",null,"It is because we defined the name argument in the "),(0,i.kt)("p",null,"[",(0,i.kt)("strong",{parentName:"p"},"path()"),"]","    ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.path"},"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.path")," "),(0,i.kt)("p",null," func. in the polls/urls.py module. So we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"{% url %}")," template tag."),(0,i.kt)("h5",{id:"namespacing-url-names"},"Namespacing URL names"),(0,i.kt)("p",null,"How does Django differentiate the URL names between numerous Apps."),(0,i.kt)("p",null,"Use ",(0,i.kt)("strong",{parentName:"p"},"namespace")," to Ur URLconf. Go to ",(0,i.kt)("em",{parentName:"p"},"polls/urls.py")," and add an app_name to set the application namespace. Then , modify ",(0,i.kt)("em",{parentName:"p"},"polls/index.html")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#polls/urls.py\napp_name = 'polls'\nurlpatterns = [...]\n\x3c!--polls/index.html--\x3e\n<li><a href=\"{% url 'polls:detail' question.id %}\">{{ question.question_text }}</a></li>\n")),(0,i.kt)("h2",{id:"write-a-minimal-form"},"Write a minimal form"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"action : ",(0,i.kt)("inlineCode",{parentName:"li"},"{% url 'polls:vote' question.id %}")," , We have created URLconf for the polls application in ",(0,i.kt)("em",{parentName:"li"},"polls/urls.py")),(0,i.kt)("li",{parentName:"ul"},"Prevent ",(0,i.kt)("a",{parentName:"li",href:"https://docs.djangoproject.com/en/4.0/ref/csrf/"},"Cross Site Request Forgeries")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"{% csrf_token %}"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\x3c!-- polls/templates/polls/detail.html --\x3e\n<form action="{% url \'polls:vote\' question.id %}" method="post">\n{% csrf_token %}\n<fieldset>\n    <legend><h1>{{ question.question_text }}</h1></legend>\n    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n    {% for choice in question.choice_set.all %}\n        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">\n        <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br>\n    {% endfor %}\n</fieldset>\n<input type="submit" value="Vote">\n</form>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"revise views.py => ",(0,i.kt)("inlineCode",{parentName:"li"},"def vote():"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"from django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\n\nfrom .models import Choice, Question\n# ...\ndef vote(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = question.choice_set.get(pk=request.POST['choice'])\n    except (KeyError, Choice.DoesNotExist):\n        # Redisplay the question voting form.\n        return render(request, 'polls/detail.html', {\n            'question': question,\n            'error_message': \"You didn't select a choice.\",\n        })\n    else:\n        selected_choice.votes += 1\n        selected_choice.save()\n        # Always return an HttpResponseRedirect after successfully dealing\n        # with POST data. This prevents data from being posted twice if a\n        # user hits the Back button.\n        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"revise views.py => ",(0,i.kt)("inlineCode",{parentName:"p"},"def results():")," "),(0,i.kt)("p",{parentName:"li"},"which is almost the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"def detail():")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"def results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, 'polls/results.html', {'question': question})\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add new file in templates/polls <  result .html>")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\x3c!--polls/templates/polls/result.html--\x3e\n<h1>{{ question.question_text }}</h1>\n\n<ul>\n{% for choice in question.choice_set.all %}\n    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>\n{% endfor %}\n</ul>\n\n<a href=\"{% url 'polls:detail' question.id %}\">Vote again?</a>\n")),(0,i.kt)("h3",{id:"generic-view"},"Generic view"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#django.views.generic.list.ListView"},"Generic display views")),(0,i.kt)("p",null,"Less code is better!All the html files we have is similar(redundant). What the files do is : Getting data from DB(according to the URL) , Loading template and returning the rendered one. "),(0,i.kt)("p",null,'Django provides a shortcut called the "generic views" system, which abstract common patterns to the point , so we do not need to write Python code.'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"code-shuffle?")),(0,i.kt)("p",{parentName:"blockquote"},"Generally, U will know whether generic views are a good fit for Ur problem. Therefore , U will use them from the beginning, rather than refactoring code halfway through.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Convert the URLconf."),(0,i.kt)("li",{parentName:"ol"},"Delete some of the old, unneeded views."),(0,i.kt)("li",{parentName:"ol"},"Introduce new views based on Django's generic views.")),(0,i.kt)("h5",{id:"amend-urlconf"},"Amend URLconf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Change from ",(0,i.kt)("inlineCode",{parentName:"li"},"views.index")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"views.IndexView.as_view()")," ... and also Details and result."),(0,i.kt)("li",{parentName:"ul"},"Change from ",(0,i.kt)("inlineCode",{parentName:"li"},"< int:question_id>")," to  ",(0,i.kt)("inlineCode",{parentName:"li"},"< int:pk>")," "),(0,i.kt)("li",{parentName:"ul"},"vote remains the same.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#polls/urls.py\nfrom django.urls import path\nfrom . import views\n\napp_name = 'polls'\nurlpatterns = [\n    path('', views.IndexView.as_view(), name='index'),\n    path('<int:pk>/', views.DetailView.as_view(), name='detail'),\n    path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),\n    path('<int:question_id>/vote/', views.vote, name='vote'),\n]\n")),(0,i.kt)("h5",{id:"amend-views"},"Amend views"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"from django.views import generic"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Change class index, details, results"),(0,i.kt)("p",{parentName:"li"},"*write comments below the def , and U can see the usages of the function when U hover on it."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We use two generic views here : ListView and DetailView.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Both Views use a default template called ",(0,i.kt)("strong",{parentName:"li"},"<app")," ",(0,i.kt)("strong",{parentName:"li"},"name>/<model")," ",(0,i.kt)("strong",{parentName:"li"},"name>_list(or detail).html")),(0,i.kt)("li",{parentName:"ul"},"In DetailView, the ",(0,i.kt)("strong",{parentName:"li"},"question")," variable is provided automatically."),(0,i.kt)("li",{parentName:"ul"},"In ListView, the default variable is ",(0,i.kt)("strong",{parentName:"li"},"question_list"),", So we need to provide the ",(0,i.kt)("strong",{parentName:"li"},"context_object_name")," attribute, telling it that we want to use ",(0,i.kt)("strong",{parentName:"li"},"latest_question_list")," instead."))),(0,i.kt)("li",{parentName:"ul"},"Each generic views needs to know which model to use."),(0,i.kt)("li",{parentName:"ul"})),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'class IndexView(generic.ListView):\n    template_name = \'polls/index.html\'\n    context_object_name = \'latest_question_list\'\n\n    def get_queryset(self):\n        """\n        Return the last five published questions (not including those set to be\n        published in the future).\n        """\n        return Question.objects.filter(\n            pub_date__lte=timezone.now()\n        ).order_by(\'-pub_date\')[:5]\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = \'polls/detail.html\'\n    def get_queryset(self):\n        """\n        Excludes any questions that aren\'t published yet.\n        """\n        return Question.objects.filter(pub_date__lte=timezone.now())\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = \'polls/results.html\'\n')))),(0,i.kt)("h2",{id:"testing"},"Testing"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/topics/testing/"},"Testing in Django")),(0,i.kt)("p",null,"U can test by prompt ",(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py shell")," to call the shell, and entering data to check how it behaves, or just run the application. However ",(0,i.kt)("strong",{parentName:"p"},"automated tests")," is that the testing work is done for U by the system. The biggest advantage is that U ",(0,i.kt)("strong",{parentName:"p"},"create a set of tests once"),", and then as U make changes to Ur app, U can check that Ur code still ",(0,i.kt)("strong",{parentName:"p"},"works as U originally intended"),". "),(0,i.kt)("p",null,"Why Test?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Save Ur time."),(0,i.kt)("li",{parentName:"ul"},"Not to identify problems, they prevent them."),(0,i.kt)("li",{parentName:"ul"},"Make Ur code more attractive"),(0,i.kt)("li",{parentName:"ul"},"Helps teams work together")),(0,i.kt)("p",null,"Good rules-of-thumb include having:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A separate ",(0,i.kt)("strong",{parentName:"li"},"TestClass"),"  for each model or view"),(0,i.kt)("li",{parentName:"ul"},"A separate test method for each set of conditions U want to test"),(0,i.kt)("li",{parentName:"ul"},"Test method names that describe their function")),(0,i.kt)("h4",{id:"create-a-test-to-expose-the-bug"},"Create a test to expose the bug"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"edit in ",(0,i.kt)("em",{parentName:"li"},"polls/tests.py")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from django.test import Testcase")),(0,i.kt)("li",{parentName:"ul"},"create django.test.TestCase subclass")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#polls/tests.py\nimport datetime\nfrom django.test import TestCase\nfrom django.utils import timezone\nfrom .models import Question\n\nclass QuestionModelTests(TestCase):\n\n    def test_was_published_recently_with_future_question(self):\n        """\n        was_published_recently() returns False for questions whose pub_date\n        is in the future.\n        """\n        time = timezone.now() + datetime.timedelta(days=30)\n        future_question = Question(pub_date=time)\n        self.assertIs(future_question.was_published_recently(), False)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python manage.py test polls")," , what it did",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"looked for tests in the ",(0,i.kt)("strong",{parentName:"li"},"polls")," app"),(0,i.kt)("li",{parentName:"ol"},"found subclass of the django.test.TestCase class"),(0,i.kt)("li",{parentName:"ol"},"created a special DB for testing"),(0,i.kt)("li",{parentName:"ol"},"looked for test method - ",(0,i.kt)("strong",{parentName:"li"},'one whose names begin with "test"')),(0,i.kt)("li",{parentName:"ol"},"in ",(0,i.kt)("em",{parentName:"li"},"test_was_published_recently_with_future_question")," , it create a instance whose ",(0,i.kt)("em",{parentName:"li"},"pub_date")," field is 30 days in the future"),(0,i.kt)("li",{parentName:"ol"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"assertIs()")," method, discover that it returns ",(0,i.kt)("strong",{parentName:"li"},"True"),", though we want it to return ",(0,i.kt)("strong",{parentName:"li"},"False"))))),(0,i.kt)("h4",{id:"fix-the-bug"},"Fix the bug"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We know what the problem is, so amend the method in models.py"),(0,i.kt)("li",{parentName:"ul"},"run the test again")),(0,i.kt)("h4",{id:"more-comprehensive-tests"},"More comprehensive tests"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#polls/tests.py\nimport datetime\nfrom django.test import TestCase\nfrom django.utils import timezone\nfrom .models import Question\n\nclass QuestionModelTests(TestCase):\n\n    def test_was_published_recently_with_future_question(self):\n        """\n        was_published_recently() returns False for questions whose pub_date\n        is in the future.\n        """\n        time = timezone.now() + datetime.timedelta(days=30)\n        future_question = Question(pub_date=time)\n        self.assertIs(future_question.was_published_recently(), False)\n    def test_was_published_recently_with_old_question(self):\n        """\n        was_published_recently() returns False for questions whose pub_date\n        is older than 1 day.\n        """\n        time = timezone.now() - datetime.timedelta(days=1, seconds=1)\n        old_question = Question(pub_date=time)\n        self.assertIs(old_question.was_published_recently(), False)\n\n    def test_was_published_recently_with_recent_question(self):\n        """\n        was_published_recently() returns True for questions whose pub_date\n        is within the last day.\n        """\n        time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)\n        recent_question = Question(pub_date=time)\n        self.assertIs(recent_question.was_published_recently(), True)\n')),(0,i.kt)("h3",{id:"test-a-view"},"Test a view"),(0,i.kt)("h4",{id:"django-test-client"},"Django test Client"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/topics/testing/tools/#django.test.Client"},"Testing tools |Client")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test in shell , since the things we did are not necessary in test.py"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"python manage.py shell"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"from django.test.utils import setup_test_environment"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"setup_test_environment()")," : "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"installs template renderer which will allow us to examine some additional attributes on responses such as  ",(0,i.kt)("strong",{parentName:"li"},"response.context"),"  "),(0,i.kt)("li",{parentName:"ul"},"However it would not create a test DB, it tests in existing DB."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"from django.test import Client"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"client = Client()"),"  : create an instance of the client for our us"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> # get a response from '/'\n>>> response = client.get('/')\n#Not Found: /\n>>> response.status_code\n#404\n>>> # we'll use 'reverse()' rather than a hardcoded URL\n>>> from django.urls import reverse\n>>> response = client.get(reverse('polls:index'))\n>>> response.status_code\n#200\n>>> response.content\nb'\\n    <ul>\\n    \\n        <li><a href=\"/polls/1/\">What&#x27;s up?</a></li>\\n    \\n    </ul>\\n\\n'\n>>> response.context['latest_question_list']\n#<QuerySet [<Question: What's up?>]>\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"After amend the bugs, let's create automated test"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"[",(0,i.kt)("strong",{parentName:"p"},"django.test.TestCase"),"]","    ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/4.0/topics/testing/tools/#django.test.TestCase"},"https://docs.djangoproject.com/en/4.0/topics/testing/tools/#django.test.TestCase")," "),(0,i.kt)("p",{parentName:"li"},"provide other assert methods  like ",(0,i.kt)("inlineCode",{parentName:"p"},"assertContains()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"assertQuerysetEqual()")))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'#polls/tests.py\nfrom django.urls import reverse\ndef create_question(question_text, days):\n    """\n    Create a question with the given `question_text` and published the\n    given number of `days` offset to now (negative for questions published\n    in the past, positive for questions that have yet to be published).\n    """\n    time = timezone.now() + datetime.timedelta(days=days)\n    return Question.objects.create(question_text=question_text, pub_date=time)\n\n\nclass QuestionIndexViewTests(TestCase):\n    def test_no_questions(self):\n        """\n        If no questions exist, an appropriate message is displayed.\n        """\n        response = self.client.get(reverse(\'polls:index\'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, "No polls are available.")\n        self.assertQuerysetEqual(response.context[\'latest_question_list\'], [])\n\n    def test_past_question(self):\n        """\n        Questions with a pub_date in the past are displayed on the\n        index page.\n        """\n        question = create_question(question_text="Past question.", days=-30)\n        response = self.client.get(reverse(\'polls:index\'))\n        self.assertQuerysetEqual(\n            response.context[\'latest_question_list\'],\n            [question],\n        )\n\n    def test_future_question(self):\n        """\n        Questions with a pub_date in the future aren\'t displayed on\n        the index page.\n        """\n        create_question(question_text="Future question.", days=30)\n        response = self.client.get(reverse(\'polls:index\'))\n        self.assertContains(response, "No polls are available.")\n        self.assertQuerysetEqual(response.context[\'latest_question_list\'], [])\n\n    def test_future_question_and_past_question(self):\n        """\n        Even if both past and future questions exist, only past questions\n        are displayed.\n        """\n        question = create_question(question_text="Past question.", days=-30)\n        create_question(question_text="Future question.", days=30)\n        response = self.client.get(reverse(\'polls:index\'))\n        self.assertQuerysetEqual(\n            response.context[\'latest_question_list\'],\n            [question],\n        )\n\n    def test_two_past_questions(self):\n        """\n        The questions index page may display multiple questions.\n        """\n        question1 = create_question(question_text="Past question 1.", days=-30)\n        question2 = create_question(question_text="Past question 2.", days=-5)\n        response = self.client.get(reverse(\'polls:index\'))\n        self.assertQuerysetEqual(\n            response.context[\'latest_question_list\'],\n            [question2, question1],\n        )\n')),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We also need to test the DetailView and ResultView, in case of someone knew or guess the URL. So we add a similar constraint to DetailView and ResultView.")))),(0,i.kt)("h2",{id:"customize-apps-look-and-feel"},"Customize App's look and feel"),(0,i.kt)("p",null,'Aside from the HTML generated by the server, we also need CSS, JavaScript, images etc. to render the page. In Django , we refer to these files as "static files". And ',(0,i.kt)("strong",{parentName:"p"},"django.contrib.staticfiles")," help us collects static files in different apps into a single location that can easily be served in production."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a directory <  static> in polls.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a directory <  polls> in static, and then create a file < style.css >")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"edit .css"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"/*  polls/static/polls/style.css  */\nli a {\n    color: green;\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"edit index.html , add these in the top"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'\x3c!-- polls/templates/polls/index.html  --\x3e\n{% load static %}\x3c!--generates the absolute URL of static files.--\x3e\n<link rel="stylesheet" type="text/css" href="{% static \'polls/style.css\' %}">\n')))),(0,i.kt)("h5",{id:"add-images"},"Add images"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a directory < images> in the same directory as style.css"),(0,i.kt)("li",{parentName:"ol"},"Put images into it"),(0,i.kt)("li",{parentName:"ol"},"edit style.css")),(0,i.kt)("h2",{id:"customize-the-admin-form"},"Customize the admin form"),(0,i.kt)("h3",{id:"admin-form"},"Admin form"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can change order of field."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"#polls/admin.py\nclass QuestionAdmin(admin.ModelAdmin):\n    fields = ['pub_date', 'question_text']\n\nadmin.site.register(Question, QuestionAdmin)\n")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Split the form up into fieldsets"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"#polls/admin.py\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None,               {'fields': ['question_text']}),\n        ('Date information', {'fields': ['pub_date']}),\n    ]\n\nadmin.site.register(Question, QuestionAdmin)\n")))),(0,i.kt)("h3",{id:"adding-related-objects"},"Adding related objects"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question")," has multiple ",(0,i.kt)("strong",{parentName:"p"},"Choices"),", there are 2 methods to connect them."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do what Question do"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"from .models import Choice")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"admin.site.register(Choice)")),(0,i.kt)("p",{parentName:"li"},"But we can only add one choice at once.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add Choice with Question"),(0,i.kt)("p",{parentName:"li"},"remove ",(0,i.kt)("inlineCode",{parentName:"p"},"admin.site.register(Choice)")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"#polls/admin.py\nclass ChoiceInline(admin.StackedInline):\n    model = Choice\n    extra = 3\n    \nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ...\n    ]\n    inlines = [ChoiceInline]\n    \nadmin.site.register(Question, QuestionAdmin)\n")))),(0,i.kt)("h5",{id:"change-stackedinline-to-tabularinline"},"Change ",(0,i.kt)("inlineCode",{parentName:"h5"},"StackedInline")," to ",(0,i.kt)("inlineCode",{parentName:"h5"},"TabularInline")),(0,i.kt)("p",null,"\u200b\t\t"),(0,i.kt)("h3",{id:"admin-change-list"},"Admin change list"),(0,i.kt)("p",null,"Add field name ",(0,i.kt)("inlineCode",{parentName:"p"},"list_display = ()")),(0,i.kt)("p",null,"Add filter ",(0,i.kt)("inlineCode",{parentName:"p"},"list_filter = ['pub_date']")),(0,i.kt)("p",null,"Add search bar ",(0,i.kt)("inlineCode",{parentName:"p"},"search_fields = ['question_text']")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#polls/admin.py\nclass QuestionAdmin(admin.ModelAdmin):\n    # ...\n    list_display = ('question_text', 'pub_date', 'was_published_recently')\n    list_filter = ['pub_date']\n")),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"display()"),"decorator to decorate dufault field name 'was_published_recently'"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#polls/models.py\nclass Question(models.Model):\n    # ...\n    @admin.display(\n        boolean=True,\n        ordering='pub_date',\n        description='Published recently?',\n    )\n    def was_published_recently(self):\n        now = timezone.now()\n        return now - datetime.timedelta(days=1) <= self.pub_date <= now\n")))}m.isMDXComponent=!0}}]);