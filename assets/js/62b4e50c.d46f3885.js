"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3042],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),s=p(n),k=o,N=s["".concat(i,".").concat(k)]||s[k]||u[k]||a;return n?r.createElement(N,l(l({ref:t},c),{},{components:n})):r.createElement(N,l({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=s;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:o,l[1]=d;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8901:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return s}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],d={},i="Tree",p={unversionedId:"DataStructures/Tree",id:"DataStructures/Tree",title:"Tree",description:"\u6a39\u7684\u6982\u5ff5",source:"@site/docs/DataStructures/Tree.md",sourceDirName:"DataStructures",slug:"/DataStructures/Tree",permalink:"/docs/DataStructures/Tree",editUrl:"https://github.com/yehs1225/yehs1225.github.io/docs/DataStructures/Tree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sorting\u6392\u5e8f",permalink:"/docs/DataStructures/Sorting\u6392\u5e8f"},next:{title:"Deploy",permalink:"/docs/Django/[DJ]Deploy"}},c=[{value:"\u6a39\u7684\u6982\u5ff5",id:"\u6a39\u7684\u6982\u5ff5",children:[{value:"\u5c08\u6709\u540d\u8a5e",id:"\u5c08\u6709\u540d\u8a5e",children:[],level:3}],level:2},{value:"\u6a39\u7684\u8868\u793a\u65b9\u6cd5",id:"\u6a39\u7684\u8868\u793a\u65b9\u6cd5",children:[{value:"\u4e00\u822c\u5316\u4e32\u5217\u8868\u793a\u6cd5(gernalized list)",id:"\u4e00\u822c\u5316\u4e32\u5217\u8868\u793a\u6cd5gernalized-list",children:[],level:3},{value:"\u5de6\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5",id:"\u5de6\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5",children:[],level:3},{value:"\u5206\u652f\u5ea6\u70ba2\u7684\u8868\u793a\u6cd5",id:"\u5206\u652f\u5ea6\u70ba2\u7684\u8868\u793a\u6cd5",children:[],level:3}],level:2},{value:"\u4e8c\u5143\u6a39",id:"\u4e8c\u5143\u6a39",children:[{value:"\u6a39\u548c\u4e8c\u5143\u6a39\u7684\u5171\u540c\u57fa\u672c\u6027\u8cea",id:"\u6a39\u548c\u4e8c\u5143\u6a39\u7684\u5171\u540c\u57fa\u672c\u6027\u8cea",children:[],level:4},{value:"\u4e8c\u5143\u6a39\u7684\u6027\u8cea",id:"\u4e8c\u5143\u6a39\u7684\u6027\u8cea",children:[],level:4},{value:"\u4e8c\u5143\u6a39\u8868\u793a\u6cd5",id:"\u4e8c\u5143\u6a39\u8868\u793a\u6cd5",children:[{value:"\u9663\u5217\u8868\u793a\u4e8c\u5143\u6a39",id:"\u9663\u5217\u8868\u793a\u4e8c\u5143\u6a39",children:[],level:4},{value:"\u93c8\u7bc0\u4e32\u5217\u8868\u793a\u4e8c\u5143\u6a39",id:"\u93c8\u7bc0\u4e32\u5217\u8868\u793a\u4e8c\u5143\u6a39",children:[],level:4}],level:3}],level:2},{value:"\u4e8c\u5143\u6a39\u8d70\u8a2a",id:"\u4e8c\u5143\u6a39\u8d70\u8a2a",children:[{value:"\u5229\u7528\u5806\u758a\u548c\u8ff4\u5708\u65b9\u5f0f\u5be6\u4f5c",id:"\u5229\u7528\u5806\u758a\u548c\u8ff4\u5708\u65b9\u5f0f\u5be6\u4f5c",children:[],level:4},{value:"\u968e\u5c64\u8d70\u8a2a(level-order traversal)",id:"\u968e\u5c64\u8d70\u8a2alevel-order-traversal",children:[],level:4}],level:2},{value:"\u4e8c\u5143\u641c\u5c0b\u6a39(binary search tree)",id:"\u4e8c\u5143\u641c\u5c0b\u6a39binary-search-tree",children:[{value:"\u641c\u5c0b\u8cc7\u6599",id:"\u641c\u5c0b\u8cc7\u6599",children:[],level:4},{value:"\u65b0\u589e\u8cc7\u6599",id:"\u65b0\u589e\u8cc7\u6599",children:[],level:4},{value:"\u522a\u9664\u8cc7\u6599",id:"\u522a\u9664\u8cc7\u6599",children:[],level:4}],level:2},{value:"Heap \u5806\u7a4d",id:"heap-\u5806\u7a4d",children:[{value:"\u65b0\u589e\u8cc7\u6599x",id:"\u65b0\u589e\u8cc7\u6599x",children:[],level:4},{value:"\u522a\u9664\u8cc7\u6599x\uff08x\u70ba\u5806\u7a4d\u4e2d\u6700\u5927\u503c=root\uff09",id:"\u522a\u9664\u8cc7\u6599xx\u70ba\u5806\u7a4d\u4e2d\u6700\u5927\u503croot",children:[],level:4}],level:2}],u={toc:c};function s(e){var t=e.components,d=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,d,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tree"},"Tree"),(0,a.kt)("h2",{id:"\u6a39\u7684\u6982\u5ff5"},"\u6a39\u7684\u6982\u5ff5"),(0,a.kt)("p",null,"\u6a39\u662f\u4e00\u7a2e\u91cd\u8981\u7684",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"\u96e2\u6563")),"\u7d50\u69cb(discrete structure)\uff0c\u63d0\u4f9b\u300c",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"\u5177\u6709\u5c64\u6b21\u95dc\u4fc2")),"\u300d\u7684\u6982\u5ff5\u4f86\u7d50\u69cb\u8cc7\u6599\u3002\u751f\u6d3b\u4e2d\u5e38\u898b\u7684\u6a39\u6709\u300c\u65cf\u8b5c\u300d\u3001\u300c\u6f14\u5316\u6a39\u300d\u3001\u300c\u7d44\u7e54\u67b6\u69cb\u300d\u3001\u300c\u904b\u7b97\u6a39\u300d\u7b49\u7b49\u3002"),(0,a.kt)("h3",{id:"\u5c08\u6709\u540d\u8a5e"},"\u5c08\u6709\u540d\u8a5e"),(0,a.kt)("h4",{id:""}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"\u5b9a\u7fa9")),(0,a.kt)("p",{parentName:"blockquote"},"\u6a39\u70ba\u7bc0\u9ede\u7d44\u6210\u7684\u6709\u9650\u96c6\u5408\uff0c\u5176\u4e2d"),(0,a.kt)("p",{parentName:"blockquote"},"(1) \u5b58\u5728\u4e00\u7279\u6b8a\u7bc0\u9edeR\u7a31\u70ba\u6a39\u6839(root)"),(0,a.kt)("p",{parentName:"blockquote"},"(2) \u5176\u4ed6\u7bc0\u9ede\u53ef\u5206\u6210n\u500b\u7121\u4ea4\u96c6\u7684\u96c6\u5408:T1,T2,...,Tn\uff0cn\u2267=0\uff0c\u800cT1,T2,...,Tn \u672c\u8eab\u7686\u70ba\u6a39\uff0c\u7a31\u5176\u70baR\u7684\u5b50\u6a39(subtree)")),(0,a.kt)("p",null,"\u5728\u5b9a\u7fa9\u4e2d\uff0c\u5404\u5b50\u6a39T1,T2,...,Tn\u4ea6\u6cbf\u7528\u4e86\u6a39\u7684\u5b9a\u7fa9(\u905e\u8ff4)\u3002"),(0,a.kt)("p",null,"\u57161\u63cf\u7e6a\u4e86\u4e00\u68f5\u300c\u6709\u6839\u6a39\u300d(rooted tree)\uff0c\u4e26\u642d\u914d\u4e0b\u5217\u540d\u8a5e\u7c21\u4ecb(\u4e0b\u6587\u82e5\u7121\u7279\u5225\u5f37\u8abf\u7686\u70ba\u6b64\u985e\u6a39)\uff1b\u57162\u70ba\u300c\u7121\u6839\u6a39\u300d(unrooted tree)\uff0c\u5e38\u5728\u4e0d\u9700\u8003\u91cf\u7bc0\u9ede\u9593\u8cc7\u6599\u95dc\u4fc2\u6642\u4f7f\u7528(\u4ea6\u5373\u7121\u968e\u5c64\u6982\u5ff5)\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571612 \u4e00\u68f5\u6a39",src:n(2438).Z,width:"1576",height:"704"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"node \u7bc0\u9ede: \u5713\u5708\u6240\u6a19\u660e\u4e4b\u8cc7\u6599\u53ca\u5411\u4e0b\u5206\u652f\u7684\u5408\u7a31\u3002\u517116\u500b\u3002"),(0,a.kt)("li",{parentName:"ul"},"root\u6839 : node A \u3002"),(0,a.kt)("li",{parentName:"ul"},"degree\u5206\u652f\u5ea6 : \u4e00\u500bnode\u7684\u6240\u6709\u5b50\u6a39\u7684\u6578\u76ee\u3002\u4f8b\u5982A\u7684degree\u70ba3\u3001C\u70ba1\uff0cD\u70ba2\u3002\u4e00\u68f5\u6a39\u7684degree\u70ba\u5176\u6240\u6709node\u4e2ddegree\u6700\u5927\u8005\uff0c\u57161\u5373\u70ba3\u3002"),(0,a.kt)("li",{parentName:"ul"},"leaf (or terminal node ) : degree\u70ba0\u7684node(\u5373\u5176\u7121\u4efb\u4f55\u5b50\u6a39)\uff0c\u5982GHKLMNOP\u3002"),(0,a.kt)("li",{parentName:"ul"},"non-terminal node : \u4efb\u4f55\u975etermianl node\u3002"),(0,a.kt)("li",{parentName:"ul"},"child (son) : \u4efb\u4f55\u7bc0\u9ede\u4e4b\u5b50\u6a39\u7684\u6a39\u6839\u3002BCD\u7686\u70baA\u7684son\u3002"),(0,a.kt)("li",{parentName:"ul"},"father(parent) : A\u70baBCD\u7684father\u3002"),(0,a.kt)("li",{parentName:"ul"},"sibling(brother) : \u5171\u6709\u4e00\u500bfather\u4e4bnode\u3002\u4f8b\u5982BCD\u3001EFG\u3002"),(0,a.kt)("li",{parentName:"ul"},"ancestor : \u4efb\u4e00\u7bc0\u9ede\u8d70\u5411\u6a39\u6839\u6240\u7d93\u904e\u7684\u6240\u6709\u7bc0\u9ede\u3002\u4f8b\u5982L\u7684ancestor\u70baFBA\u3002"),(0,a.kt)("li",{parentName:"ul"},"descendant : \u4efb\u4e00\u7bc0\u9ede\u7684\u6240\u6709\u5b50\u6a39\u7bc0\u9ede\u3002\u4f8b\u5982D\u7684descendant\u70baIJNOP\u3002"),(0,a.kt)("li",{parentName:"ul"},"level(l) :   \u5b9a\u7fa9\u968e\u5c64l\u679d\u7bc0\u9ede\u5176son\u7684\u968e\u5c64\u70bal+1\u3002"),(0,a.kt)("li",{parentName:"ul"},"depth(height) : \u6a39\u7684\u6700\u9ad8\u968e\u5c64\u3002\u57161\u70ba4\u3002")),(0,a.kt)("h2",{id:"\u6a39\u7684\u8868\u793a\u65b9\u6cd5"},"\u6a39\u7684\u8868\u793a\u65b9\u6cd5"),(0,a.kt)("p",null,"\u9663\u5217\u53ef\u8868\u793a\u6a39\uff0c\u7136\u800c\u6703\u8f03\u70ba\u56f0\u96e3\u3002\u6b64\u4ee5\u93c8\u7d50\u4e32\u5217(linked list)\u8868\u793a\uff0c\u5047\u8a2d\u4e00\u68f5\u6a39T\u7684\u5206\u652f\u5ea6\u70baK\uff0c\u5373T\u4e2d\u5b58\u5728\u7bc0\u9edeX\u5176\u5206\u652f\u5ea6\u70bak\uff0c\u70ba\u4f7f\u93c8\u7d50\u7bc0\u9ede\u53ef\u5b58\u653eX\u9ede\u7684k\u500b\u5b50\u6578\u6307\u6a19\u3002\u6bcf\u500b\u7bc0\u9ede\u9808\u6709k\u500b\u6307\u6a19\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e\uff0c\u82e5\u6b64\u6a39\u6709n\u500b\u7bc0\u9ede\u5247\u9700\u8981nk\u500b\u6307\u6a19\u4f4d\u7f6e\u3002\u7136\u800c\u9664\u4e86root\u4ee5\u5916\uff0c\u6bcf\u500b\u7bc0\u9ede\u50c5\u9700\u4e00\u500b\u6307\u6a19\u6307\u5411\uff0c\u4ea6\u5373\u53ea\u9700n-1\u500b\u6307\u6a19\u4f4d\u7f6e\uff0c\u56e0\u6b64\u591a\u7528\u7684\u7a7a\u9593\u70bank-(n-1)=n(k-1)+1\uff0c\u975e\u5e38\u6d6a\u8cbb\u7a7a\u9593\u3002\u65bc\u662f\u4ecb\u7d39\u4e0b\u5217\u4e09\u7a2e\u8868\u793a\u65b9\u6cd5:\u4e00\u822c\u5316\u4e32\u5217\u3001\u5de6\u5b50\u53f3\u5144\u5f1f\u3001\u5206\u652f\u5ea6\u70ba2\u7684\u8868\u793a\u6cd5\u3002"),(0,a.kt)("h3",{id:"\u4e00\u822c\u5316\u4e32\u5217\u8868\u793a\u6cd5gernalized-list"},"\u4e00\u822c\u5316\u4e32\u5217\u8868\u793a\u6cd5(gernalized list)"),(0,a.kt)("p",null,"\u4e4b\u524d\u5b78\u5230\u7684\u4e32\u5217\u53ef\u7528A=(a1,a2,...,an)\u8868\u793a\uff0c\u70ba\u6709\u9650\u4e14\u6709\u5e8f\u4e4b\u96c6\u5408\uff1b\u6bcf\u5143\u7d20ai\uff0c1\u2266i\u2266n\uff0c\u7686\u6709\u76f8\u540c\u8cc7\u6599\u578b\u614b\u3002\u82e5\u4e0d\u9650\u5b9a\u9808\u6709\u76f8\u540c\u8cc7\u6599\u578b\u614b\u5247\u7a31\u70ba\u4e00\u822c\u5316\u4e32\u5217(gernalized list)\uff0c\u65bc\u662fa\u53ef\u4ee5\u662fnode\u4e5f\u53ef\u4ee5\u662ftree\uff0c\u56e0\u6b64\u7528\u5176\u4f86\u8868\u793a\u4e00\u68f5\u6a39T :"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"T = (R,T1,T2, ... ,Tn)")),(0,a.kt)("p",null,"T1,T2, ... ,Tn\u70baR\u7684\u5b50\u6a39\uff0cTi\u53ef\u80fd\u70ba\u7bc0\u9ede\u6216\u6a39(\u905e\u8ff4)\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u7bc4\u4f8b")),(0,a.kt)("p",null,"\u57161\u7684\u4e00\u68f5\u6a39\u53ef\u8868\u793a\u6210\u4e00\u822c\u4e32\u5217\u5982\u4e0b:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"T = (A,(B,(E,K),(F,L,M),G),(C,H),(D,(I,N),(J,O,P)))")),(0,a.kt)("p",null,"\u82e5\u5c07\u7bc0\u9edeA\u7684\u4e09\u500b\u5152\u5b50BCD\u6240\u5f62\u6210\u4e4b\u5b50\u6a39\uff0c\u5206\u5225\u53d6\u540d\u70baT1,T2,T3\u5247\u53ef\u7c21\u5316\u70ba"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"T=(A,T1,T2,T3) \uff0c\u5176\u4e2d"),(0,a.kt)("p",{parentName:"blockquote"},"T1 = (B,(E,K),(F,L,M),G)"),(0,a.kt)("p",{parentName:"blockquote"},"T2 = (C,H)"),(0,a.kt)("p",{parentName:"blockquote"},"T3 = (D,(I,N),(J,O,P))")),(0,a.kt)("p",null,"\u5982\u57163\u4e32\u5217\u4e2d\u7684\u5143\u7d20\u53ef\u80fd\u662f\u67d0\u4e00\u6a39\u4e0a\u7684\u7bc0\u9ede\u6216\u4e00\u5b50\u6a39\uff1b\u800c\u57164\u93c8\u7d50\u7bc0\u9ede\u4e2d\u7684\u6b04\u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u6a39\u7bc0\u9ede\u8cc7\u6599R\uff0c\u4e5f\u53ef\u80fd\u662f\u5b50\u6a39Ti(1<=i<=n)\u7684\u6307\u6a19\uff0c\u56e0\u6b64\u53ef\u65b0\u589e\u4e00\u500b\u7bc0\u9ede\u6b04\u4f4dtag\u4f86\u5340\u5225\u3002\u5728C\u8a9e\u8a00\u4e2d\u53ef\u7528union\u4f86\u9054\u6210\u7bc0\u9ede\u5ba3\u544a\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571634 \u4e00\u822c\u5316\u4e32\u5217",src:n(684).Z,width:"1291",height:"667"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"union\u7bc0\u9ede\u5ba3\u544a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct TreeNode\n{\n    int tag;//\u7528tag\u5340\u5206,\u6b04\u4f4dnode\u7684\u8cc7\u6599\u578b\u614b\n    //union:\u7de8\u8b6f\u5668\u5728\u7de8\u8b6f\u968e\u6bb5\u6703\u9810\u7559\u7a7a\u9593(int or  struct TreeNode\u6307\u6a19\u4e2d\u8f03\u5927\u8005))\n    union\n    {\n        int data;\n        struct TreeNode *Tlink;\n    }node;\n    struct TreeNode *link;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5be6\u4f5c\u7d50\u679c\u793a\u610f\u5716")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u57165 \u4e00\u822c\u5316\u93c8\u7d50\u8868\u793a",src:n(343).Z,width:"1986",height:"447"})),(0,a.kt)("h3",{id:"\u5de6\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5"},"\u5de6\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5"),(0,a.kt)("p",null,"\u89c0\u5bdf\u57161\u7684\u6a39\uff0c\u53ef\u4ee5\u767c\u73fe\u6bcf\u500b\u7bc0\u9ede\u90fd\u6709\u552f\u4e00\u7684 ",(0,a.kt)("strong",{parentName:"p"},"\u6700\u5de6\u5152\u5b50(leftmost child)"),"\uff1b\u4e5f\u6709\u4e00\u500b\u6700\u9760\u8fd1\u5b83\u7684",(0,a.kt)("strong",{parentName:"p"},"\u53f3\u5144\u5f1f(rightmost sibling)"),"\uff0c\u57161\u53ef\u8f49\u63db\u6210\u57166\uff0c\u6bcf\u500b\u7bc0\u9ede\u7d50\u69cb\u70ba\u57167\uff1b\uff0c\u93c8\u7bc0\u4e32\u5217\u5982\u57168\u3002\n",(0,a.kt)("img",{alt:"\u571667 \u4e00\u822c\u5316\u93c8\u7d50\u8868\u793a",src:n(4112).Z,width:"1318",height:"451"}),"\n",(0,a.kt)("img",{alt:"\u57168 \u4e00\u822c\u5316\u93c8\u7d50\u8868\u793a",src:n(6975).Z,width:"956",height:"493"})),(0,a.kt)("h3",{id:"\u5206\u652f\u5ea6\u70ba2\u7684\u8868\u793a\u6cd5"},"\u5206\u652f\u5ea6\u70ba2\u7684\u8868\u793a\u6cd5"),(0,a.kt)("p",null,"\u5c07\u5de6\u5b50\u53f3\u5144\u5f1f\u7a0d\u5fae\u65cb\u8f49\u53ef\u4ee5\u5f97\u5230degree\u70ba2\u7684\u6a39\uff0c\u7a31\u70ba\u4e8c\u5143\u6a39(binary tree)(\u57169)\u3002\u4e8c\u5143\u6578\u53ef\u4ee5\u7528\u4f86\u8868\u793a\u4efb\u4f55\u6a39!\n",(0,a.kt)("img",{alt:"\u57168 \u4e00\u822c\u5316\u93c8\u7d50\u8868\u793a",src:n(7816).Z,width:"1198",height:"695"})),(0,a.kt)("h2",{id:"\u4e8c\u5143\u6a39"},"\u4e8c\u5143\u6a39"),(0,a.kt)("p",null,"\u4e8c\u5143\u6a39\u7d50\u69cb\u7c21\u55ae\u4e14\u5bb9\u6613\u8868\u793a(\u53ef\u7528\u9663\u5217\u6216\u93c8\u7d50\u4e32\u5217\u8868\u793a)\uff0c\u66f4\u6709\u8a31\u591a\u6709\u7528\u7684\u6027\u8cea\uff0c\u4e14\u4efb\u4f55\u6a39\u7686\u53ef\u7528\u6b64\u8868\u793a!\u56e0\u6b64\u662f\u4e00\u9805\u975e\u5e38\u91cd\u8981\u7684\u8cc7\u6599\u7d50\u69cb\u3002\u4efb\u4e00\u7bc0\u9ede\u6700\u591a\u6709\u5169\u5206\u652f\u4e14\u6709",(0,a.kt)("strong",{parentName:"p"},"\u5de6\u53f3\u4e4b\u5206"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"\u5b9a\u7fa9")),(0,a.kt)("p",{parentName:"blockquote"},"\u4e8c\u5143\u6a39\u662f\u4e00\u500b\u7531\u7bc0\u9ede\u7d44\u6210\u7684\u6709\u9650\u96c6\u5408\uff0c\u53ef\u4ee5\u662f\u7a7a\u96c6\u5408\uff0c\u6216\u662f\u5305\u542b\u4e86"),(0,a.kt)("p",{parentName:"blockquote"},"(1) \u4e00\u500b\u6a39\u6839\u7bc0\u9ede\uff1b"),(0,a.kt)("p",{parentName:"blockquote"},"(2) \u5176\u4ed6\u7bc0\u9ede\u5206\u5272\u6210\u5169\u500b\u6c92\u6709\u4ea4\u96c6\u7684\u4e8c\u5143\u6a39 : \u4e00\u70ba\u5de6\u5b50\u6a39(left subtree)\uff1b\u4e00\u70ba\u53f3\u5b50\u6a39(right subtree)\u3002  ")),(0,a.kt)("p",null,"\u6a39\u8207\u4e8c\u5143\u6a39\u9593\u7684\u5dee\u7570:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u6a39\u4e0d\u53ef\u6709\u7a7a\u7bc0\u9ede\uff0c\u800c\u4e8c\u5143\u6a39\u53ef\u4ee5\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u6a39\u7684\u5b50\u6a39\u6c92\u6709\u9806\u5e8f\uff0c\u800c\u4e8c\u5143\u6578\u7684\u5b50\u6a39\u6709\u5de6\u53f3\u4e4b\u5206\u3002")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u7bc4\u4f8b"),"\n",(0,a.kt)("img",{alt:"\u571611",src:n(5032).Z,width:"544",height:"305"})),(0,a.kt)("h4",{id:"\u6a39\u548c\u4e8c\u5143\u6a39\u7684\u5171\u540c\u57fa\u672c\u6027\u8cea"},"\u6a39\u548c\u4e8c\u5143\u6a39\u7684\u5171\u540c\u57fa\u672c\u6027\u8cea"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7406 1: \u82e5\u4e00\u68f5\u6a39T\u7684\u7e3d\u7bc0\u9ede\u6a39\u70baV\uff0c\u7e3d\u908a\u6a39\u70baE\uff0c\u5247 V=E+1\u3002")),(0,a.kt)("h4",{id:"\u4e8c\u5143\u6a39\u7684\u6027\u8cea"},"\u4e8c\u5143\u6a39\u7684\u6027\u8cea"),(0,a.kt)("p",null,"\u4e8c\u5143\u6578\u53ef\u5bb9\u7d0d\u7684\u7bc0\u9ede\u6a39\u8207\u6df1\u5ea6\u4f3c\u4e4e\u6709\u6975\u5927\u95dc\u4fc2\u3002\u571612\u7684\u7279\u6b8a\u4f8b\u5b50\u8868\u793a\u5169\u7a2e\u6a39 - \u5b8c\u5099\u4e8c\u5143\u6a39(complete binary tree) \u53ca \u6b6a\u659c\u6a39(skew tree) \uff0c\u5169\u8005\u5177\u6709\u540c\u6a23\u7684\u7bc0\u9ede\u6578\uff0c\u7136\u800c\u6b6a\u659c\u6578\u9700\u8981\u8f03\u591a\u968e\u5c64\u4f86\u5b58\u653e\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571611",src:n(9744).Z,width:"995",height:"447"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7406 1 :"),(0,a.kt)("p",{parentName:"blockquote"},"(1) \u4e8c\u5143\u6a39\u4e0a\u968e\u5c64i\u7684\u7bc0\u9ede\u6578\u76ee\u6700\u591a\u70ba2^(i-1)\uff0ci\u22661;"),(0,a.kt)("p",{parentName:"blockquote"},"(2) \u6df1\u5ea6\u70bak\u7684\u4e8c\u5143\u6a39\uff0c\u5176\u7bc0\u9ede\u6578\u76ee\u6700\u591a\u70ba2^k -1\uff0ck\u22671\u3002")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7406 2 : "),(0,a.kt)("p",{parentName:"blockquote"},"\u82e5T\u70ba\u4e00\u975e\u7a7a\u7684\u4e8c\u5143\u6a39\uff0cn0\u70ba\u6a39\u8449\u7bc0\u9ede\u6578\u76ee\uff0cn2\u70ba\u5206\u652f\u5ea6\u70ba2\u7684\u7bc0\u9ede\u6578\u76ee\uff0c\u5247n0=n2+1\u3002")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5b8c\u6eff\u4e8c\u5143\u6a39(full binary tree)")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7fa9 : \u4e00\u500b\u6df1\u5ea6\u70bak\u7684\u5b8c\u6eff\u4e8c\u5143\u6a39\u5373\u70ba\u4e00\u6df1\u5ea6\u70bak\u4e14\u67092^k -1\u500b\u7bc0\u9ede\u7684\u4e8c\u5143\u6a39\uff0ck\u22670\u3002")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5b8c\u5099\u4e8c\u5143\u6a39(complete binary tree)")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7fa9 : \u6df1\u5ea6\u70bak\uff0c\u7bc0\u9ede\u6578\u70ban\u7684\u4e8c\u5143\u6a39\u70ba\u5b8c\u5099\u4e8c\u5143\u6a39\uff0c\u82e5\u4e14\u552f\u82e5 : "),(0,a.kt)("p",{parentName:"blockquote"},"(1) k=1\u6642\uff0c\u6a39\u6709\u4e00\u500b\u7bc0\u9ede\uff1b"),(0,a.kt)("p",{parentName:"blockquote"},"(2) \u7576k\u22672\u4e141\u2266 i < k\u6642\uff0c\u6df1\u5ea6 i \u6709 2^(i-1) \u500b\u7bc0\u9ede\uff0c\u4e14\u7b2ck\u5c64\u7684\u7bc0\u9ede\u7686\u7531\u7b2ck-1\u5c64\u7684\u5206\u652f\u7531\u5de6\u81f3\u53f3\u9010\u4e00\u9023\u63a5\u800c\u6210\u3002")),(0,a.kt)("p",null,"By\u5b9a\u7fa9\uff0c\u7f3a\u53e3\u4e00\u5b9a\u5728\u53f3\u4e0b\u89d2\u3002"),(0,a.kt)("p",null,"\u7531\u5b9a\u74061\u53ef\u5f97"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"n \u500b\u7bc0\u9ede\u7684\u5b8c\u5099\u6216\u5b8c\u6eff\u4e8c\u5143\u6a39\uff0c\u5176\u6df1\u5ea6\u70ba","[log2(n+1)]"," (\u9ad8\u65af\u53d6\u9802\u7b26\u865f\u6253\u4e0d\u51fa\u4f86@@)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u6b63\u898f\u4e8c\u5143\u6a39(formal binary tree)")),(0,a.kt)("p",null,"\u5e38\u7528\u65bc\u55ae\u6dd8\u6c70\u8cfd\u5236\uff0c\u7531\u5b9a\u74062 : n0=n2+1\uff0c\u53ef\u63a8\u5c0e\u51fa\u55ae\u6dd8\u6c70\u8cfd\u5236\u4e2d\u81ean\u500b\u968a\u4f0d\u4e2d\u7522\u751f\u51a0\u8ecd\u9808\u8209\u8fa6n-1\u5834\u6bd4\u8cfd\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7fa9 : \u82e5\u4e8c\u5143\u6a39\u4e2dinternal node\u5167\u90e8\u7bc0\u9ede(\u4ea6\u5373\u6240\u6709\u975e\u6a39\u8449\u7684\u7bc0\u9ede)\u6070\u6709\u5169\u500b\u5b50\u7bc0\u9ede\u3002")),(0,a.kt)("h3",{id:"\u4e8c\u5143\u6a39\u8868\u793a\u6cd5"},"\u4e8c\u5143\u6a39\u8868\u793a\u6cd5"),(0,a.kt)("p",null,"\u7528\u9663\u5217\u8868\u793a\u6a39\u5f88\u4e0d\u65b9\u4fbf\uff0c\u800c\u4e8c\u5143\u6a39\u7d50\u69cb\u8f03\u55ae\u7d14\uff0c\u53ef\u7528\u9663\u5217\u4f86\u8868\u793a\u3002\u4ee5\u4e0b\u5c07\u4ee5\u9663\u5217\u53ca\u93c8\u7bc0\u4e32\u5217\u5169\u7a2e\u65b9\u5f0f\u8868\u793a\u4e8c\u5143\u6a39\u3002"),(0,a.kt)("h4",{id:"\u9663\u5217\u8868\u793a\u4e8c\u5143\u6a39"},"\u9663\u5217\u8868\u793a\u4e8c\u5143\u6a39"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u74061 : \u82e5\u6709\u4e00\u500b\u5177\u6709n\u500b\u7bc0\u9ede\u7684",(0,a.kt)("strong",{parentName:"p"},"\u5b8c\u5099\u4e8c\u5143\u6a39"),"\u4ee5\u5faa\u5e8f\u7684\u65b9\u5f0f\u7de8\u865f\uff0c\u4e26\u4f9d\u5e8f\u5b58\u653e\u5728\u9663\u5217A\u4e2d\uff0c\u5373\u7b2ci\u500b\u7bc0\u9ede\u5b58\u653e\u5728A","[i]","\u4e2d\uff0c1\u2266i\u2266n\uff0c\u5247"),(0,a.kt)("p",{parentName:"blockquote"},"(1) \u7bc0\u9edei\u7684\u7236\u89aa\u7bc0\u9ede\u4f4d\u5728A","[i/2]","\u4e2d\uff0ci\u22601(i=1\u6642\uff0c\u5176\u7bc0\u9ede\u6b63\u70ba\u6a39\u6839\uff0c\u7121\u7236\u7bc0\u9ede)\u3002"),(0,a.kt)("p",{parentName:"blockquote"},"(2) \u82e52i\u2266n\uff0c\u7bc0\u9edei\u7684\u5de6\u5152\u5b50\u7bc0\u9ede\u4f4d\u5728A","[2i]","\u8655\uff1b\u82e52i>n\uff0c\u7bc0\u9edei\u6c92\u6709\u5de6\u5152\u5b50\u7bc0\u9ede\u3002"),(0,a.kt)("p",{parentName:"blockquote"},"(3) \u82e52i+1\u2266n\uff0c\u7bc0\u9edei\u7684\u53f3\u5152\u5b50\u7bc0\u9ede\u4f4d\u5728A","[2i+1]","\u8655\uff1b2i+1>n\uff0c\u7bc0\u9edei\u6c92\u6709\u53f3\u5152\u5b50\u7bc0\u9ede\u3002")),(0,a.kt)("p",null,"\u4f9d\u4e0a\u8ff0\u5b9a\u7406\uff0c\u5c07\u571612\u7684\u6a39\u5b58\u653e\u5728\u9663\u5217\u4e2d\u5982\u571613\uff0c\u53ef\u4ee5\u767c\u73fe\u6b6a\u659c\u6a39\u6703\u6d6a\u8cbb\u7a7a\u9593\u53ca\u6642\u9593\uff0c\u6df1\u5ea6\u70bak\u7684\u4e8c\u5143\u6a39\u64c1\u67092^k -1\u500b\u53ef\u653e\u7bc0\u9ede\u7684\u7a7a\u9593\uff0c\u82e5\u5b58\u653e\u6df1\u5ea6k\u7684\u6b6a\u659c\u6a39\u53ea\u7528\u5230k\u500b\u7a7a\u9593!"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571613",src:n(7488).Z,width:"1934",height:"785"})),(0,a.kt)("h4",{id:"\u93c8\u7bc0\u4e32\u5217\u8868\u793a\u4e8c\u5143\u6a39"},"\u93c8\u7bc0\u4e32\u5217\u8868\u793a\u4e8c\u5143\u6a39"),(0,a.kt)("p",null,"\u9663\u5217\u8868\u793a\u5b8c\u5099\u4e8c\u5143\u6a39\u4ee5\u76f8\u7576\u65b9\u4fbf\uff0c\u4f46\u662f\u4f7f\u7528\u9663\u5217\u6642\u5982\u679c\u8cc7\u6599\u9700\u8981\u983b\u7e41\u7684\u65b0\u589e\u522a\u9664\u5247\u6703\u975e\u5e38\u8017\u6642\uff0c\u56e0\u6b64\u53ef\u5617\u8a66\u4ee5\u93c8\u7d50\u4e32\u5217\u8868\u793a(\u571614)\u3002\u53ef\u7528\u4e00\u6307\u6a19root\u6307\u5411\u6a39\u6839\uff0c\u4f5c\u70ba\u6a39\u93c8\u7bc0\u4e32\u5217\u7684\u8d77\u9ede\u3002\u571613\u548c14\u6bd4\u8f03\u53ef\u4ee5\u767c\u73fe\u5b8c\u5099\u4e8c\u5143\u6a39\u5728\u5169\u7a2e\u65b9\u6cd5\u90fd\u8f03\u4e0d\u6703\u6d6a\u8cbb\u7a7a\u9593\uff1b\u800c\u6b6a\u659c\u6a39\u7684\u9663\u5217\u8868\u793a\u6cd5\u53ef\u80fd\u9700\u89812^n -1\u500b\u9663\u5217\u5143\u7d20\uff0c\u4e32\u5217\u50c5\u9700n\u500b\uff0c\u6240\u4ee5\u67092^n -1-n\u7684\u7a7a\u9593\u88ab\u6d6a\u8cbb\u3002"),(0,a.kt)("p",null,"\u571614\u7684\u7bc0\u9ede\u7d50\u69cb\u5728\u53d6\u5f97\u5152\u5b50\u7bc0\u9ede\u7684\u6307\u6a19\u5f88\u65b9\u4fbf\uff0c\u4f46\u662f\u7236\u7bc0\u9ede\u7684\u53d6\u5f97\u5247\u7121\u6cd5\u6eff\u8db3\uff0c\u56e0\u6b64\u53ef\u4f9d\u9700\u6c42\u81ea\u884c\u5b9a\u7fa9\u93c8\u7d50\u7bc0\u9ede\uff0c\u52a0\u4e0a\u4e00\u6b04\u4f4d\u6307\u5411\u7236\u7bc0\u9ede\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u767c\u73fe\u6a39\u8449\u5411\u4e0b\u6307\u7684\u5169\u500b\u6307\u6a19\u7686\u6703\u6307\u5411NULL\uff0c\u9019\u9805\u7279\u6027\u5f15\u767c\u4e86\u5f15\u7dda\u4e8c\u5143\u6a39\u7684\u9748\u611f(\u4e0b\u9762\u6703\u63d0\u5230)\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571614",src:n(9807).Z,width:"1656",height:"786"})),(0,a.kt)("h2",{id:"\u4e8c\u5143\u6a39\u8d70\u8a2a"},"\u4e8c\u5143\u6a39\u8d70\u8a2a"),(0,a.kt)("p",null,"\u5c0d\u5168\u8cc7\u6599\u505a\u52d5\u4f5c\u4f8b\u5982:\u8a08\u7b97\u6240\u6709\u6578\u76ee\u3001\u5370\u51fa\u6240\u6709\u8cc7\u6599\u3001\u5728\u6240\u6709\u8cc7\u6599\u4e2d\u641c\u5c0b\u67d0\u9805\u8cc7\u6599...\u7b49\u6642\uff0c\u5373\u9700\u8981\u5c0d\u4e8c\u5143\u6a39\u9032\u884c\u8d70\u8a2a(traversal)\u904b\u7b97\uff0c\u518d\u8d70\u8a2a\u7684\u540c\u6642\u9032\u884c\u8a08\u7b97\u5217\u5370\u6216\u641c\u5c0b\u7b49\u52d5\u4f5c\uff0c\u5e0c\u671b\u767c\u5c55\u7684\u8d70\u8a2a\u6f14\u7b97\u6cd5\u53ef\u4ee5\u5c0d\u6bcf\u4e00\u7bc0\u9ede\u7686\u4e00\u81f4\uff0c\u65b9\u4fbf\u64b0\u5beb\u7a0b\u5f0f\u5be6\u4f5c\u3002"),(0,a.kt)("p",null,"\u4ee5\u571615\u70ba\u4f8b\uff0c\u82e5\u5c0d\u4e00\u6a39\u7bc0\u9ede\u800c\u8a00\uff0cV\u4ee3\u8868\u8655\u7406\u7bc0\u9ede\u8cc7\u6599\uff0cL\u4ee3\u8868\u8d70\u8a2a\u5176\u5de6\u5b50\u6a39\uff0cR\u4ee3\u8868\u8d70\u8a2a\u5176\u53f3\u5b50\u6a39\uff0c\u5171\u6709\u516d\u7a2e\u8d70\u8a2a\u7d44\u5408\uff0c\u53c8\u56e0\u5c0d\u7a31\u7684\u7de3\u6545\uff0c\u53ef\u4ee5\u53ea\u8003\u616e\u5de6\u5b50\u6a39\u4e00\u5b9a\u6703\u5148\u65bc\u53f3\u5b50\u6a39\u88ab\u8d70\u8a2a\uff0c\u56e0\u6b64\u5269\u4e0b\u4e09\u7a2e\u9806\u5e8f\uff0c\u4ee5V\u5c0d\u61c9\u4f4d\u7f6e\u53d6\u540d\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571615",src:n(4904).Z,width:"1598",height:"370"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u7bc0\u9ede\u7d50\u69cb\u5ba3\u544a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct BTreeNode\n{\n  struct BTreeNode *leftchild;\n  char data;\n  struct BTreeNode *rightchild;  \n};\nstruct BTreeNode *root;\n")),(0,a.kt)("p",null,"\u571616\u70ba\u904b\u7b97\u662f\u5229\u7528\u4e09\u7a2e\u65b9\u5f0f\u8d70\u8a2a\u4e4b\u7d50\u679c\uff0c\u53ef\u4ee5\u767c\u73fe\u5c31\u662f\u5229\u7528\u905e\u8ff4\u7684\u65b9\u5f0f\uff0c\u4e8b\u5be6\u4e0a\uff0c\u4e8c\u5143\u6a39\u7684\u5efa\u69cb\u4e5f\u662f\u5efa\u7acb\u5728\u905e\u8ff4\u89c0\u5ff5\u4e4b\u4e0a\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571616",src:n(8195).Z,width:"1438",height:"587"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u4e2d\u5e8f\u8d70\u8a2aLVR")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"void inoreder(struct BTreeNode *node)\n{\n    if(node!=NULL)\n    {\n        inorder(node->leftchild);\n        cout<<node->data;\n        inorder(node->rightchild);\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5f8c\u5e8f\u8d70\u8a2aLRV")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"void postoreder(struct BTreeNode *node)\n{\n    if(node!=NULL)\n    {\n        postoreder(node->leftchild);\n        postoreder(node->rightchild);\n        cout<<node->data;\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u524d\u5e8f\u8d70\u8a2aVLR")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"void preorder(struct BTreeNode *node)\n{\n    if(node!=NULL)\n    {\n        cout<<node->data;\n        preorder(node->leftchild);\n        preorder(node->rightchild);\n    }\n}\n")),(0,a.kt)("p",null,"\u85c9\u7531\u4ee5\u4e0a\u7a0b\u5f0f\u78bc\uff0c\u57fa\u672c\u4e0a\u8981\u5f97\u5230\u8d70\u8a2a\u7d50\u679c\u50c5\u9700\u547c\u53eb",(0,a.kt)("inlineCode",{parentName:"p"},"inorder(root);"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"preorder(root);"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"postorder(root);"),"\u9700\u6ce8\u610f\u7684\u662f\u4e2d\u5e8f\u8d70\u8a2a\u9084\u9808\u52a0\u4e0a\u5fc5\u8981\u7684\u62ec\u865f\uff0c\u4ee5\u5f97\u5230\u6b63\u78ba\u904b\u7b97\u5f0f\u3002"),(0,a.kt)("h4",{id:"\u5229\u7528\u5806\u758a\u548c\u8ff4\u5708\u65b9\u5f0f\u5be6\u4f5c"},"\u5229\u7528\u5806\u758a\u548c\u8ff4\u5708\u65b9\u5f0f\u5be6\u4f5c"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u4e2d\u5e8f\u8d70\u8a2aLVR")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"//\u5ba3\u544a\u7bc0\u9ede\u69cb\u9020\nstruct BTreeNode\n{\n  struct BTreeNode *leftchild;\n  char data;\n  struct BTreeNode *rightchild; \n};\nstruct BTreeNode *root;//\u6307\u5411\u6a39\u6839\n//\u5ba3\u544a\u5806\u758a\u5143\u7d20\u7d50\u69cb\nstruct stackNode\n{\n    struct BTreeNode *treenode;\n    struct stackNode *next;\n};\nstruct StackNode *top;//\u6307\u5411\u5806\u758a\u9802\u7aef\n//push\nvoid push_StackNode(BTreeNode *node)\n{\n    struct stackNode *oldtop;//\u65b0\u6307\u6a19\u5b58\u820a\u7684top\n    oldtop = top;\n    top = (struct stackNode*)malloc(sizeof(struct stackNode));//\u5206\u914d\u7a7a\u9593\u7d66\u65b0\u7bc0\u9ede\n    top->treenode = node;\n    top->next = oldtop;//\u65b0\u7bc0\u9ede\u9023\u5411\u820a\u7bc0\u9ede\n}\nstruct BTreeNode *pop_StackNode()\n{\n    if(top==NULL)//stack is empty\n    {\n        StackIsEmpty();\n    }\n    else\n    {\n        struct stackNode *node;\n        struct stackNode *oldtop;\n        oldtop = top;\n        node = top->treenode;\n        top = top->next;\n        free(oldtop);\n        return node;\n    }\n}\nvoid inorder_Stack(struct BTreeNode *node)\n{   do\n    {\n        while(node!=NULL)\n        {\n            push_StackNode(node);\n            node = node->leftchild;\n        }//push all leftchild\n        if(top!=NULL)\n        {\n            node = pop_StackNode();\n            cout<<node->data;\n            node = node->rightchild;\n        }//print data and check rightchild\n    } while(top!=NULL || node!=NULL);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u524d\u5e8f\u8d70\u8a2aVLR")),(0,a.kt)("p",null,"\u4e2d\u5e8f\u548c\u524d\u5e8f\u7684\u5dee\u7570\u50c5\u5728:\u8f38\u51faV\u7684\u6642\u6a5f\uff0c\u4e2d\u5e8f\u9047\u5230V\u6642\u5148\u653e\u5165\u5806\u758a\u53bb\u627e\u5de6\u5b50\u7bc0\u9ede\uff1b\u524d\u5e8f\u5247\u76f4\u63a5\u5370\u51fa\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u4e2d\u5e8f\u7684\u6982\u5ff5\u53bb\u4fee\u6539\u5be6\u4f5c\u51fa\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"void preorder_Stack(struct BTreeNode *node)\n{   do\n    {\n        while(node!=NULL)\n        {   cout<<node->data;\n            push_StackNode(node);\n            node = node->leftchild;\n        }//push all leftchild\n        if(top!=NULL)\n        {\n            node = pop_StackNode();\n            node = node->rightchild;\n        }//print data and check rightchild\n    } while(top!=NULL || node!=NULL);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5f8c\u5e8f\u8d70\u8a2aLRV")),(0,a.kt)("p",null,"LRV\u53cd\u8f49\u5f8c\u5373\u70baVRL\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u56e0\u6b64\u53ef\u4ee5\u5148\u6c42\u51faVRL\u7d50\u679c\u518d\u9032\u884c\u53cd\u8f49\u3002\u597d\u8655\u5728\u65bcVRL\u53ef\u4ee5\u7528\u4e0a\u9762\u53d6\u5f97\u524d\u5e8f(VLR)\u7684\u65b9\u6cd5\u4f86\u5be6\u4f5c\uff0c\u6211\u5011\u591a\u5ba3\u544a",(0,a.kt)("inlineCode",{parentName:"p"},"push_data(node)"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"pop_data()"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"top_data"),"\u4f86\u5be6\u4f5c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct StackNode *top_data;\nvoid push_data(struct BTreeNode *node)\n{\n    struct StackNode *oldtop_data;\n    oldtop_data = top_data;\n    top_data = (struct stackNode*)malloc(sizeof(struct stackNode));\n    top_data->data = node;\n    top_data->next = oldtop_data;\n}\nstruct StackNode *pop_data()\n{\n    if(top_data==NULL)\n    {\n        StackisEmpty();\n    }\n    else\n    {\n        struct BTreeNode *node;\n        struct StackNode *oldtop_data;\n        oldtop_data = top_data;\n        node = top_data->data;\n        top_data=top_data->next;\n        free(oldtop_data);\n        return node;\n    }\n}\nvoid postorder_Stack(struct BTreeNode *node)\n{   do\n    {\n        while(node!=NULL)\n        {   push_data(node);\n            push_StackNode(node);\n            node = node->rightchild;\n        }//push all leftchild\n        if(top!=NULL)\n        {\n            node = pop_StackNode();\n            node = node->leftchild;\n        }//print data and check rightchild\n    } while(top!=NULL || node!=NULL);\n    while(top_data!=NULL) cout<<pop_data();\n}\n")),(0,a.kt)("h4",{id:"\u968e\u5c64\u8d70\u8a2alevel-order-traversal"},"\u968e\u5c64\u8d70\u8a2a(level-order traversal)"),(0,a.kt)("p",null,"\u8d70\u8a2a\u968e\u5c64\u7531\u5c0f\u81f3\u5927\uff0c\u540c\u4e00\u968e\u5c64\u5247\u5f9e\u5de6\u81f3\u53f3\u3002\u5c0d\u540c\u4e00\u968e\u5c64\u800c\u8a00\uff0c\u5148\u8d70\u8a2a\u7684\u7bc0\u9ede\uff0c\u5176\u5b50\u7bc0\u9ede\u4e5f\u6703\u5728\u4e0b\u4e00\u968e\u5c64\u5148\u88ab\u8d70\u8a2a\uff0c\u6709FIFO\u7684\u7279\u6027\uff0c\u7528\u4f47\u5217queue\u4f86\u5be6\u505a\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"//\u5ba3\u544a\u7bc0\u9ede\u69cb\u9020\nstruct BTreeNode\n{\n  struct BTreeNode *leftchild;\n  char data;\n  struct BTreeNode *rightchild; \n};\nstruct BTreeNode *root;//\u6307\u5411\u6a39\u6839\n\nstruct Qnode\n{\n    struct BTreeNode *BTnode;//\u6307\u5411\u8cc7\u6599(\u70baBTreeNode)\n    struct Qnode *next;//\u6307\u5411\u4e0b\u4e00\u500bQnode\n};\nstruct Qnode *front;\nstruct Qnode *rear;\nvoid AddQueue(struct BTreeNode *Tnode)\n{\n    struct Qnode *node;\n    node = (struct Qnode *)malloc(sizeof(struct Qnode));\n    node->BTnode = Tnode;\n    node->next = NULL;\n    if(front==NULL)//new Queue\n    {\n        front = node;\n    }\n    else\n    {\n        rear->next = node;\n    }\n    rear = node;\n}\nstruct BTreeNode *DeleteQueue()\n{   struct BTreeNode *node;\n    struct Qnode *oldfront;//\u5b58\u8981\u88ab\u522a\u9664\u5143\u7d20\u7684\u6307\u6a19\u4f5c\u70bafree\u7528\n    if(rear==NULL)\n    {\n        QisEmpty();\n    }\n    else\n    {\n        oldfront = front;\n        node = front->BTNode;\n        front = front->next;//front\u5f80\u4e0b\u6307\n        free(oldfront);\n        return node;\n    }\n}\nvoid LevelOrder(struct BTreeNode *node)\n{\n    AddQueue(node);\n    while(front!=NULL)\n    {\n        node = DeleteQueue();\n        cout<<node->BTnode;\n        if(node->leftchild!=NULL) AddQueue(node->leftchild);//\u4f9d\u5e8f\u8d70\u8a2a\u5de6\u53f3\n        if(node->rightchild!=NULL) AddQueue(node->rightchild);\n    }\n}\n\n")),(0,a.kt)("h2",{id:"\u4e8c\u5143\u641c\u5c0b\u6a39binary-search-tree"},"\u4e8c\u5143\u641c\u5c0b\u6a39(binary search tree)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"\u5b9a\u7fa9")),(0,a.kt)("p",{parentName:"blockquote"},"\u4e8c\u5143\u641c\u5c0b\u6a39\u662f\u4e00\u68f5\u4e8c\u5143\u6a39\uff0c\u53ef\u80fd\u662f\u7a7a\u4e8c\u5143\u6a39\uff0c\u82e5\u4e0d\u70ba\u7a7a\u4e8c\u5143\u6a39\uff0c\u5247\u6eff\u8db3\u4e0b\u5217\u6027\u8cea:"),(0,a.kt)("p",{parentName:"blockquote"},"(1) \u6240\u6709\u7bc0\u9ede\u5167\u7684\u8cc7\u6599\u6027\u8cea\u662f\u76f8\u7570\u7684 *(\u975e\u5fc5\u8981\uff0c\u5728\u6b64\u65b9\u4fbf\u8a0e\u8ad6)\u3002"),(0,a.kt)("p",{parentName:"blockquote"},"(2) \u5de6\u5b50\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9(\u5982\u679c\u6709) \u8981\u6bd4\u7236\u5b50\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9\u5c0f\u3002*(\u548c1\u6709\u95dc)"),(0,a.kt)("p",{parentName:"blockquote"},"(3) \u53f3\u5b50\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9(\u5982\u679c\u6709) \u8981\u6bd4\u7236\u5b50\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9\u5927\u3002*(\u548c1\u6709\u95dc)"),(0,a.kt)("p",{parentName:"blockquote"},"(4)  \u4ee5\u5de6\u548c\u53f3\u5b50\u7bc0\u9ede\u70ba\u6a39\u6839\u7684\u5de6\u5b50\u6a39\u548c\u53f3\u5b50\u6a39\u4e5f\u662f\u4e8c\u5143\u641c\u5c0b\u6a39\u3002(\u905e\u8ff4\u6982\u5ff5)")),(0,a.kt)("p",null,"\u4f9d\u7167\u5b9a\u7fa9\uff0c\u571617\u4e2dab\u7686\u70ba\u4e8c\u5143\u641c\u5c0b\u6a39\uff0cC\u5247\u4e0d\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571617",src:n(1289).Z,width:"1699",height:"533"})),(0,a.kt)("h4",{id:"\u641c\u5c0b\u8cc7\u6599"},"\u641c\u5c0b\u8cc7\u6599"),(0,a.kt)("p",null,"\u5229\u7528\u4e8c\u5143\u641c\u5c0b\u6a39\u5c0d\u8cc7\u6599\u5927\u5c0f\u6392\u5e8f\u975e\u5e38\u660e\u78ba\u7684\u7279\u8cea\uff0c\u53ef\u4ee5\u5728\u641c\u5c0b\u8cc7\u6599\u6642\u66f4\u70ba\u65b9\u4fbf\uff0c\u4ee5\u4e0b\u4ee5\u905e\u8ff4\u53ca\u975e\u905e\u8ff4\u7684\u65b9\u5f0f\u64b0\u5beb\u3002\u975e\u905e\u8ff4\u7684\u65b9\u5f0f\u6703\u8f03\u6709\u6548\u7387!\u82e5\u6709\u4fdd\u7559\u8d70\u8a2a\u8cc7\u8a0a\u7684\u9700\u6c42\u53ef\u4ee5\u52a0\u5165\u5806\u758a\u5132\u5b58\u8cc7\u6599\u3002"),(0,a.kt)("p",null,"\u8a08\u7b97\u6642\u9593\u8907\u96dc\u5ea6\u6642\uff0c\u8003\u91cf\u6700\u5dee\u60c5\u6cc1\u70ba\u300c\u6108\u641c\u5c0b\u8cc7\u6599\u6839\u672c\u4e0d\u5728\u6a39\u88e1\u300d\uff0c\u56e0\u6b64\u70baO(h)\uff0ch\u70ba\u6a39\u9ad8\uff0c\u82e5\u6a39\u6709\u5171n\u500b\u7bc0\u9ede\uff0c\u5247logn\u2266h\u2266n\u3002\u7531\u6b64\u53ef\u77e5\u6a39\u7684\u9ad8\u5ea6\u6703\u5f71\u97ff\u641c\u5c0b\u901f\u5ea6\uff0c\u56e0\u6b64\u6709\u5b78\u8005\u63d0\u51fa\u300c\u9ad8\u5ea6\u5e73\u8861\u6a39\u300d(AVL tree)\uff0c\u5c07\u6a39\u7684\u9ad8\u5ea6\u63a7\u5236\u5728logn\uff0c\u5373\u53ef\u5c07\u6642\u9593\u63a7\u5236\u5728O(logn)\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u505a\u6cd5\u3002"),(0,a.kt)("p",null,"(\u4ee5\u4e0b\u4e8c\u5143\u641c\u5c0b\u6a39\u5b9a\u7fa9\u70ba\u53f3\u5b50\u7bc0\u9ede\u2267\u7236\u7bc0\u9ede\u3001\u5de6\u5b50\u7bc0\u9ede\uff1c\u7236\u7bc0\u9ede\u3002)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u905e\u8ff4\u641c\u5c0b")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"//declaration node\nstruct BSTreeNode\n{\n    struct BSTreeNode *leftchild;\n    int data;\n    struct BSTreeNode *rightchild;\n};\nstruct BSTreeNode *root;//point to root\nstruct BSTreeNode *SearchBST(struct BSTreeNode *tree,int x)\n{\n    if(tree==NULL) return NULL;//not found\n    if(tree->data==x) return tree;//found\n    if(tree->data<x) return SearchBST(tree->leftchild, x);//find at leftside\n    return SearchBST(tree->rightchild, x);//otherwise find at rightside\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u975e\u905e\u8ff4\u641c\u5c0b")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct BSTreeNode *SearchBST_interative(struct BSTreeNode *node,int x)\n{\n    while(node!=NULL)//if still have somewhere not searched,keep searching.\n    {\n        if(node->data==x) return node;\n        if(node->data<x) node = node->leftchild;\n        else node = node->rightchild;\n    }return NULL;\n}\n")),(0,a.kt)("h4",{id:"\u65b0\u589e\u8cc7\u6599"},"\u65b0\u589e\u8cc7\u6599"),(0,a.kt)("p",null,"\u63d2\u5165\u8cc7\u6599\u9032\u4e8c\u5143\u641c\u5c0b\u6a39\u6642\uff0c\u70ba\u7dad\u6301\u8cc7\u6599\u5927\u5c0f\u95dc\u4fc2\uff0c\u5fc5\u9808\u77e5\u9053\u53ef\u4ee5\u63d2\u5165\u7684\u4f4d\u7f6e!\u7531\u65bc\u5148\u524d\u9650\u5b9a\u8cc7\u6599\u5fc5\u76f8\u7570\uff0c\u56e0\u6b64\u5728\u63d2\u5165\u8cc7\u6599\u6642\uff0c\u53ef\u4ee5\u5148\u9032\u884c\u641c\u7d22\uff0c\u7576\u641c\u5c0b\u7d50\u679c\u70baNULL\u6642\u5373\u70ba\u8a72\u63d2\u5165\u7684\u4f4d\u7f6e\u3002\u56e0\u6b64\uff0c\u8cc7\u6599\u7d50\u69cb\u8001\u5e2b\u7684\u540d\u8a00:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5f90\u5b50\u66f0 : \u641c\u5c0b\u672a\u679c\u8655\uff0c\u65b0\u589e\u5176\u4e5f\u3002")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u905e\u8ff4")),(0,a.kt)("p",null,"\u5728\u7a0b\u5f0f\u4e2d\u5229\u7528\u4e0d\u65b7\u641c\u5c0b\u905e\u8ff4\u547c\u53eb\uff0c\u7576\u7bc0\u9ede\u88ab\u63d2\u5165\u6642\u6703\u4e00\u5c64\u5c64\u7684\u56de\u50b3\u76f4\u5230\u6839\u7bc0\u9ede\uff0c\u8b93\u7bc0\u9ede\u7684\u7236\u89aa\u90fd\u80fd\u77e5\u9053\u65b0\u589e\u4e86\u4e00\u4ee3!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct BSTreeNode *NewBSTNode(int x)\n{\n    struct BSTreeNode *node = (struct BSTreeNode *) malloc(sizeof(struct BSTreeNode));\n    node->data = x;\n    node->leftchild = NULL;\n    node->rightchild = NULL;\n    return node;\n}\nstruct BSTreeNode *InsertBSTnode(struct BSTreeNode *node,int x)\n{\n    if(node==NULL) return NewBSTNode(x);//\u641c\u5c0b\u672a\u679c\u8655\uff0c\u65b0\u589e\u5176\u4e5f\n    if(x<node->data)//go left\n        node->leftchild = InsertBSTNode(node->leftchild,x);\n    else\n        node->rightchild = InsertBSTNode(node->leftchild,x);\n    return node;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u975e\u905e\u8ff4")),(0,a.kt)("p",null,"\u300c\u641c\u5c0b\u672a\u679c\u8655\uff0c\u65b0\u589e\u5176\u4e5f\u300d\u7684\u6982\u5ff5\u4f9d\u820a\u6c92\u8b8a\uff0c\u7136\u800c\u7236\u5b50\u7684\u95dc\u4fc2\u5c31\u5fc5\u9808\u624b\u52d5\u9032\u884c\u7dad\u8b77!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"void BSTreeNode *InsertBSTnode_iterative(int x)\n{\n    struct BSTreeNode *father,*son;\n    son = root;father=NULL;//init \uff1broot is global variable\n    while(son!=NULL)\n    {\n        father = son;//\u8a18\u4f4f\u7236\u7bc0\u9ede\u5f8c\uff0c\u5f80\u4e0b\u641c\u5c0b\n        if(x<son->data) son = son->leftchild;\n        else son = son->rightchild;\n    }\n    //\u7576node son ==NULL\u6642\uff0c\u641c\u5c0b\u672a\u679c\u8655\uff0c\u65b0\u589e\u5176\u4e5f\n    son = (struct BSTreeNode *) malloc(sizeof(struct BSTreeNode));\n    son->data = x;\n    son->leftchild =NULL; \n    son->rightchild =NULL;\n    if(root==NULL) root = p;//first element in tree\n    else if(x<father->data) father->leftchild = son;\n    else father->righttchild = son;\n}\n")),(0,a.kt)("h4",{id:"\u522a\u9664\u8cc7\u6599"},"\u522a\u9664\u8cc7\u6599"),(0,a.kt)("p",null,"\u522a\u9664\u4e8c\u5143\u641c\u5c0b\u6a39\u4e0a\u7684\u8cc7\u6599\u6642\uff0c\u6703\u767c\u73fe\u6709\u4e09\u7a2e\u60c5\u5f62(\u571618)\uff0c\u4ee5\u4e0b\u5c07\u4ee5\u905e\u8ff4\u53ca\u975e\u905e\u8ff4\u7684\u65b9\u5f0f\u63a2\u8a0e\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u571618",src:n(2868).Z,width:"1704",height:"533"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u905e\u8ff4")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"(a)\u522a\u9664\u6a39\u8449"),(0,a.kt)("p",{parentName:"li"},"\u76f4\u63a5\u5c07\u6a39\u8449\u522a\u9664\uff0c\u800c\u5176\u7236\u7bc0\u9ede\u56e0\u70ba\u905e\u8ff4\u7684\u8ff4\u50b3\u6982\u5ff5\uff0c\u4e5f\u6703\u63a5\u6536\u5230\u5176\u5b50\u7bc0\u9ede\u88ab\u6539\u70baNULL\u7684\u60c5\u5f62\u3002\u56e0\u6b64\u50c5\u9700\u4e0b\u9762\u6b65\u9a5f\u5373\u53ef\u5b8c\u6210:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"//node\u70ba\u6b32\u522a\u9664\u7bc0\u9ede\ntemp = node;\nnode = NULL;  //\u56de\u50b3\u6642\u8b93\u7236\u7bc0\u9ede\u77e5\u5176Son\u70baNULL\nfree(temp);\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"(b)\u522a\u9664\u6709\u4e00\u5b50\u6a39\u7684\u7bc0\u9ede"))),(0,a.kt)("p",null,"   \u627e\u5230\u5b50\u6a39\u7684\u6a39\u6839\u53d6\u4ee3\u5373\u53ef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"//node\u70ba\u6b32\u522a\u9664\u7bc0\u9ede\ntemp = (node->leftchild) ? node->leftchild:node->rightchild; //\u78ba\u8a8dNode\u7684\u53f3\u6216\u5de6\u5b50\u6a39\u54ea\u500b\u5b58\u5728\n*node = *temp;//\u53d6\u4ee3\u88ab\u522a\u6389\u7684\u4f4d\u7f6e\nfree(temp);\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"(c)\u522a\u9664\u6709\u5169\u5b50\u6a39\u7684\u7bc0\u9ede"),(0,a.kt)("p",{parentName:"li"},"\u4ee5",(0,a.kt)("strong",{parentName:"p"},"\u5176\u53f3\u5b50\u6a39\u4e2d\u7684\u6700\u5de6\u6a39\u8449"),"(\u7a31\u70ba\u300c\u4e2d\u5e8f\u76f4\u63a5\u5f8c\u7e7c\u5143\u7d20(in-order successor)\u300d)\u53d6\u4ee3\u53ef\u7dad\u6301\u6b63\u78ba\u6027\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct BSTreeNode *InOrderSucc(struct BSTreeNode *node)\n{   struct BSTreeNode *p;\n    for(p=node;p->leftchild!=NULL;p=p->leftchild);\n    return p;\n}\n//delete\ntemp = InOrderSucc(node->rightchild);//\u627e\u5230\u4e2d\u5e8f\u76f4\u63a5\u5f8c\u7e7c\u5143\u7d20\nnode->data = temp->data;\nnode->rightchild = DeleteBSTNode(node->rightchild,temp->data);\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5b8c\u6574\u7248")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"}," struct BSTreeNode *InOrderSucc(struct BSTreeNode *node)\n {  struct BSTreeNode *p;\n     for(p=node;p->leftchild!=NULL;p=p->leftchild);\n     return p;\n }\n struct BSTreeNode *DeleteBSTNode(struct BSTreeNode *node,int x)\n {\n     struct BSTreeNode *temp;\n     if(node==NULL) return node;\n     //search\n     if(x<node->data) \n         node->leftchild = DeleteBSTree(node->leftchild,x);\n     else if(x>node->data)\n         node->rightchild = DeleteBSTree(node->rightchild,x);\n     //x found in node\n     else\n     {  //sitaution a or b\n         if((node->leftchild==NULL)||(node->rightchild==NULL))\n         {\n             temp = (node->leftchild)?node->leftchild:node->rightchild;\n             if(temp==NULL)//a -> leaf\n             {\n                 temp = node;\n                 node = NULL;\n             }\n             else *node = *temp; // b -> one subtre \n             free(temp);\n         }\n         else //c -> two subtree\n         {\n             temp = InOrderSucc(node->rightchild);//\u627e\u5230\u4e2d\u5e8f\u76f4\u63a5\u5f8c\u7e7c\u5143\u7d20\n             node->data = temp->data;\n             node->rightchild = DeleteBSTNode(node->rightchild,temp->data);\n         }\n     }\n }\n")),(0,a.kt)("h2",{id:"heap-\u5806\u7a4d"},"Heap \u5806\u7a4d"),(0,a.kt)("p",null,"Heap \u662f\u4e00\u7a2e\u7279\u6b8a\u7684\u5b8c\u5099\u4e8c\u5143\u6a39\uff0c\u7bc0\u9ede\u8207\u5176\u5b50\u7bc0\u9ede\u4e4b\u9593\u6709\u5b9a\u597d\u7684\u5927\u5c0f\u95dc\u4fc2\u5b58\u5728\u3002\u5206\u70ba\u4ee5\u4e0b\u5169\u7a2e\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5b9a\u7fa9\uff1a"),(0,a.kt)("ol",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ol"},"\u6700\u5927\u5806\u7a4d\uff1a\u70ba\u4e00\u5b8c\u5099\u4e8c\u5143\u6a39\uff0c\u4efb\u4e00\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9\u4e0d\u5c0f\u65bc\u5176\u5b50\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u6700\u5c0f\u5806\u7a4d\uff1a\u70ba\u4e00\u5b8c\u5099\u4e8c\u5143\u6a39\uff0c\u4efb\u4e00\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9\u4e0d\u5927\u65bc\u5176\u5b50\u7bc0\u9ede\u7684\u8cc7\u6599\u5167\u5bb9\u3002"))),(0,a.kt)("p",null,"\u5806\u7a4d\u56e0\u70ba\u5176\u7279\u6027\uff0c\u767c\u5c55\u51fa\u300c\u5806\u7a4d\u6392\u5e8f(Heap Sort)\u300d\u53ca\u300c\u512a\u5148\u4f47\u5217(Priority Queue)\u300d\u7b49\u3002\u4ee5\u4e0b\u904b\u7528\u9663\u5217\u8868\u793a\u5b8c\u5099\u4e8c\u5143\u6a39\u7684\u65b9\u5f0f\u4f86\u64cd\u4f5c\u4ee5\u4e0b\u5169\u7a2e\u52d5\u4f5c\uff0c\u5047\u8a2d\u73fe\u5728\u6709\u4e00\u6700\u5927\u5806\u7a4d\uff0c\u5b58\u653e\u65bc\u9663\u5217A","[1]","~A","[n]","\u4e2d\uff1a"),(0,a.kt)("h4",{id:"\u65b0\u589e\u8cc7\u6599x"},"\u65b0\u589e\u8cc7\u6599x"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u70ba\u7dad\u6301\u6a39\u7b26\u5408\u5b8c\u5099\u4e8c\u5143\u6a39\u4e4b\u5b9a\u7fa9\uff08\u767d\u8a71\u6587\uff1a\u6709\u7f3a\u4e00\u5b9a\u5728\u53f3\u4e0b\u89d2\uff09\uff0c\u5148\u5c07\u8cc7\u6599\u52a0\u5728\u6700\u5f8c\u4e00\u7bc0\u9ede\u8a3b\u6a19\u4e4b\u5f8c\uff08\u8a3b\u6a19i=n+1\uff09\uff0c\u5c07x\u653e\u5728A","[i]","\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u518d\u4f86\u70ba\u4e86\u7dad\u6301\u300c\u7236\u7bc0\u9ede\u5fc5\u9808\u5927\u65bc\u5b50\u7bc0\u9ede\u300d\u4e4b\u7279\u6027\uff0c\u9010\u4e00\u5411\u4e0a\u6aa2\u67e5i\u8207\u7236\u7bc0\u9ede(i/2)\u7684\u5927\u5c0f\u95dc\u4fc2\u662f\u5426\u9700\u8981\u8abf\u63db\u4f4d\u7f6e\uff0c\u76f4\u81f3\u6aa2\u67e5\u5230\u6700\u4e0a\u9762\u7684\u5152\u5b50\uff08root\u4e0b\u4e00\u5c64\uff09\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"#define maxsize 100\nint n,i;//n is number of elements in heap\nint heap[maxsize];\nvoid InsertHeap(int x)\n{   if(n==maxsize) HeapFull();\n    else\n    {   n++;\n        i=n;\n        while((i>1)&&(x>heap[i/2]))\n        {   heap[i]=heap[i/2];\n            i/=2;\n        }heap[i]=x;\n    }\n}\n")),(0,a.kt)("h4",{id:"\u522a\u9664\u8cc7\u6599xx\u70ba\u5806\u7a4d\u4e2d\u6700\u5927\u503croot"},"\u522a\u9664\u8cc7\u6599x\uff08x\u70ba\u5806\u7a4d\u4e2d\u6700\u5927\u503c=root\uff09"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u53d6\u51faroot\u8cc7\u6599\u5f8c\uff0c\u6703\u5269\u4e0b\u5169\u500b\u6700\u5927\u5806\u7a4d\uff0c\u5c07\u6700\u5f8c\u4e00\u7bc0\u9eden\u8cc7\u6599\u62ff\u5230root\u5b58\u653e\uff0c\u6b64\u6642\u7562\u5b9a\u4e0d\u7b26\u5408\u6700\u5927\u5806\u7a4d\u5b9a\u7fa9\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u5f9e\u6a39\u6839\u51fa\u767c\uff0c\u9078\u53d6\u5176\u5b50\u7bc0\u9ede\u4e2d\u8f03\u5927\u8005\u6bd4\u8f03\uff0c\u82e5\u7236\u7bc0\u9ede\u5927\u65bc\u5b50\u7bc0\u9ede\u5247\u7d42\u6b62\uff1b\u5426\uff0c\u5247\u4ea4\u63db\uff0c\u4e00\u76f4\u6301\u7e8c\u5230\u627e\u5230\u6a39\u8449\u7bc0\u9ede\u70ba\u6b62\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"//\u5176\u9918\u8a2d\u5b9a\u627f\u4e0a\u9762\u7bc4\u4f8b\nint x,i,j;\nint DeleteHeap()\n{   \n    if(n==0) HeapEmpty();\n    else\n    {   x = heap[1];\n        heap[1]=heap[n];\n        n--;\n        i=1;\n        while(i<=n/2)//\u6301\u7e8c\u5c0b\u627e\u76f4\u5230\u627e\u5230\u6a39\u8449\u7bc0\u9ede\n        {\n            if(heap[2*i]>heap[2*i+1]) j=2*i;\n            else j=2*i+1;\n            if(heap[j]<heap[i]) break;\n            else\n            {\n                SWAP(&heap[j],&heap[i]);\n                i=j;\n            }\n        }return x;\n    }\n}\n")))}s.isMDXComponent=!0},2438:function(e,t,n){t.Z=n.p+"assets/images/tree1-08690da5fa894728a6c86c41ff672172.jpg"},9807:function(e,t,n){t.Z=n.p+"assets/images/tree10-f1d08f77b5eccf481ebed2e2c98efed4.jpg"},4904:function(e,t,n){t.Z=n.p+"assets/images/tree11-bfae417ff045a9d984608ebd41cefc0b.jpg"},8195:function(e,t,n){t.Z=n.p+"assets/images/tree12-bac8a93b5b2175921e6d27324f4fc253.jpg"},1289:function(e,t,n){t.Z=n.p+"assets/images/tree13-373e6044f59af610aed9ab692cb80969.jpg"},2868:function(e,t,n){t.Z=n.p+"assets/images/tree14-994e56793cea4c39b1356ea8833b149c.jpg"},684:function(e,t,n){t.Z=n.p+"assets/images/tree2-45104d5c890a07995c3b604ceeaaa793.jpg"},343:function(e,t,n){t.Z=n.p+"assets/images/tree3-b91991a26f524c1366544e7add8b7448.jpg"},4112:function(e,t,n){t.Z=n.p+"assets/images/tree4-cebef04d3a78a4615568c910af522fe3.jpg"},6975:function(e,t,n){t.Z=n.p+"assets/images/tree5-9d11cebcce6117260bbbcd23e89bd6e8.jpg"},7816:function(e,t,n){t.Z=n.p+"assets/images/tree6-2d4fc22a90bf502b786176fc7c220463.jpg"},5032:function(e,t,n){t.Z=n.p+"assets/images/tree7-4a780f55eaab017aab04fd38b552c079.jpg"},9744:function(e,t,n){t.Z=n.p+"assets/images/tree8-d057bee5ea0d1ca5a4e10b3d3cd360c4.jpg"},7488:function(e,t,n){t.Z=n.p+"assets/images/tree9-2619a0bc83edd49dc363587f27a47dc0.jpg"}}]);